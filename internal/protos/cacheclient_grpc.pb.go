// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/cacheclient.proto

package client_sdk_go

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScsClient is the client API for Scs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScsClient interface {
	Get(ctx context.Context, in *XGetRequest, opts ...grpc.CallOption) (*XGetResponse, error)
	Set(ctx context.Context, in *XSetRequest, opts ...grpc.CallOption) (*XSetResponse, error)
	SetIfNotExists(ctx context.Context, in *XSetIfNotExistsRequest, opts ...grpc.CallOption) (*XSetIfNotExistsResponse, error)
	Delete(ctx context.Context, in *XDeleteRequest, opts ...grpc.CallOption) (*XDeleteResponse, error)
	Increment(ctx context.Context, in *XIncrementRequest, opts ...grpc.CallOption) (*XIncrementResponse, error)
	DictionaryGet(ctx context.Context, in *XDictionaryGetRequest, opts ...grpc.CallOption) (*XDictionaryGetResponse, error)
	DictionaryFetch(ctx context.Context, in *XDictionaryFetchRequest, opts ...grpc.CallOption) (*XDictionaryFetchResponse, error)
	DictionarySet(ctx context.Context, in *XDictionarySetRequest, opts ...grpc.CallOption) (*XDictionarySetResponse, error)
	DictionaryIncrement(ctx context.Context, in *XDictionaryIncrementRequest, opts ...grpc.CallOption) (*XDictionaryIncrementResponse, error)
	DictionaryDelete(ctx context.Context, in *XDictionaryDeleteRequest, opts ...grpc.CallOption) (*XDictionaryDeleteResponse, error)
	SetFetch(ctx context.Context, in *XSetFetchRequest, opts ...grpc.CallOption) (*XSetFetchResponse, error)
	SetUnion(ctx context.Context, in *XSetUnionRequest, opts ...grpc.CallOption) (*XSetUnionResponse, error)
	SetDifference(ctx context.Context, in *XSetDifferenceRequest, opts ...grpc.CallOption) (*XSetDifferenceResponse, error)
	ListPushFront(ctx context.Context, in *XListPushFrontRequest, opts ...grpc.CallOption) (*XListPushFrontResponse, error)
	ListPushBack(ctx context.Context, in *XListPushBackRequest, opts ...grpc.CallOption) (*XListPushBackResponse, error)
	ListPopFront(ctx context.Context, in *XListPopFrontRequest, opts ...grpc.CallOption) (*XListPopFrontResponse, error)
	ListPopBack(ctx context.Context, in *XListPopBackRequest, opts ...grpc.CallOption) (*XListPopBackResponse, error)
	ListErase(ctx context.Context, in *XListEraseRequest, opts ...grpc.CallOption) (*XListEraseResponse, error)
	ListRemove(ctx context.Context, in *XListRemoveRequest, opts ...grpc.CallOption) (*XListRemoveResponse, error)
	ListFetch(ctx context.Context, in *XListFetchRequest, opts ...grpc.CallOption) (*XListFetchResponse, error)
	ListLength(ctx context.Context, in *XListLengthRequest, opts ...grpc.CallOption) (*XListLengthResponse, error)
	ListConcatenateFront(ctx context.Context, in *XListConcatenateFrontRequest, opts ...grpc.CallOption) (*XListConcatenateFrontResponse, error)
	ListConcatenateBack(ctx context.Context, in *XListConcatenateBackRequest, opts ...grpc.CallOption) (*XListConcatenateBackResponse, error)
	// Add or Updates new element with its score to the Sorted Set.
	// If sorted set doesn't exist, a new one is created with the specified
	// element and its associated score.
	// If an element exists, then its associate score gets overridden with the one
	// provided in this operation.
	SortedSetPut(ctx context.Context, in *XSortedSetPutRequest, opts ...grpc.CallOption) (*XSortedSetPutResponse, error)
	// Fetches all the elements in the sorted set.
	SortedSetFetch(ctx context.Context, in *XSortedSetFetchRequest, opts ...grpc.CallOption) (*XSortedSetFetchResponse, error)
	// Gets the specified element and its associated score if it exists in the
	// sorted set.
	SortedSetGetScore(ctx context.Context, in *XSortedSetGetScoreRequest, opts ...grpc.CallOption) (*XSortedSetGetScoreResponse, error)
	// Removes specified elements and their associated scores
	SortedSetRemove(ctx context.Context, in *XSortedSetRemoveRequest, opts ...grpc.CallOption) (*XSortedSetRemoveResponse, error)
	// Changes the score associated with the element by specified amount.
	// If the provided amount is negative, then the score associated with the
	// element is decremented.
	// If the element that needs to be incremented isn't present in the sorted
	// set, it is added with specified number as the score.
	// If the set itself doesn't exist then a new one with specified element and
	// score is created.
	SortedSetIncrement(ctx context.Context, in *XSortedSetIncrementRequest, opts ...grpc.CallOption) (*XSortedSetIncrementResponse, error)
	// Gives the rank of an element.
	SortedSetGetRank(ctx context.Context, in *XSortedSetGetRankRequest, opts ...grpc.CallOption) (*XSortedSetGetRankResponse, error)
}

type scsClient struct {
	cc grpc.ClientConnInterface
}

func NewScsClient(cc grpc.ClientConnInterface) ScsClient {
	return &scsClient{cc}
}

func (c *scsClient) Get(ctx context.Context, in *XGetRequest, opts ...grpc.CallOption) (*XGetResponse, error) {
	out := new(XGetResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) Set(ctx context.Context, in *XSetRequest, opts ...grpc.CallOption) (*XSetResponse, error) {
	out := new(XSetResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) SetIfNotExists(ctx context.Context, in *XSetIfNotExistsRequest, opts ...grpc.CallOption) (*XSetIfNotExistsResponse, error) {
	out := new(XSetIfNotExistsResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/SetIfNotExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) Delete(ctx context.Context, in *XDeleteRequest, opts ...grpc.CallOption) (*XDeleteResponse, error) {
	out := new(XDeleteResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) Increment(ctx context.Context, in *XIncrementRequest, opts ...grpc.CallOption) (*XIncrementResponse, error) {
	out := new(XIncrementResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) DictionaryGet(ctx context.Context, in *XDictionaryGetRequest, opts ...grpc.CallOption) (*XDictionaryGetResponse, error) {
	out := new(XDictionaryGetResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/DictionaryGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) DictionaryFetch(ctx context.Context, in *XDictionaryFetchRequest, opts ...grpc.CallOption) (*XDictionaryFetchResponse, error) {
	out := new(XDictionaryFetchResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/DictionaryFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) DictionarySet(ctx context.Context, in *XDictionarySetRequest, opts ...grpc.CallOption) (*XDictionarySetResponse, error) {
	out := new(XDictionarySetResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/DictionarySet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) DictionaryIncrement(ctx context.Context, in *XDictionaryIncrementRequest, opts ...grpc.CallOption) (*XDictionaryIncrementResponse, error) {
	out := new(XDictionaryIncrementResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/DictionaryIncrement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) DictionaryDelete(ctx context.Context, in *XDictionaryDeleteRequest, opts ...grpc.CallOption) (*XDictionaryDeleteResponse, error) {
	out := new(XDictionaryDeleteResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/DictionaryDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) SetFetch(ctx context.Context, in *XSetFetchRequest, opts ...grpc.CallOption) (*XSetFetchResponse, error) {
	out := new(XSetFetchResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/SetFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) SetUnion(ctx context.Context, in *XSetUnionRequest, opts ...grpc.CallOption) (*XSetUnionResponse, error) {
	out := new(XSetUnionResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/SetUnion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) SetDifference(ctx context.Context, in *XSetDifferenceRequest, opts ...grpc.CallOption) (*XSetDifferenceResponse, error) {
	out := new(XSetDifferenceResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/SetDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) ListPushFront(ctx context.Context, in *XListPushFrontRequest, opts ...grpc.CallOption) (*XListPushFrontResponse, error) {
	out := new(XListPushFrontResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/ListPushFront", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) ListPushBack(ctx context.Context, in *XListPushBackRequest, opts ...grpc.CallOption) (*XListPushBackResponse, error) {
	out := new(XListPushBackResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/ListPushBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) ListPopFront(ctx context.Context, in *XListPopFrontRequest, opts ...grpc.CallOption) (*XListPopFrontResponse, error) {
	out := new(XListPopFrontResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/ListPopFront", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) ListPopBack(ctx context.Context, in *XListPopBackRequest, opts ...grpc.CallOption) (*XListPopBackResponse, error) {
	out := new(XListPopBackResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/ListPopBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) ListErase(ctx context.Context, in *XListEraseRequest, opts ...grpc.CallOption) (*XListEraseResponse, error) {
	out := new(XListEraseResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/ListErase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) ListRemove(ctx context.Context, in *XListRemoveRequest, opts ...grpc.CallOption) (*XListRemoveResponse, error) {
	out := new(XListRemoveResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/ListRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) ListFetch(ctx context.Context, in *XListFetchRequest, opts ...grpc.CallOption) (*XListFetchResponse, error) {
	out := new(XListFetchResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/ListFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) ListLength(ctx context.Context, in *XListLengthRequest, opts ...grpc.CallOption) (*XListLengthResponse, error) {
	out := new(XListLengthResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/ListLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) ListConcatenateFront(ctx context.Context, in *XListConcatenateFrontRequest, opts ...grpc.CallOption) (*XListConcatenateFrontResponse, error) {
	out := new(XListConcatenateFrontResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/ListConcatenateFront", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) ListConcatenateBack(ctx context.Context, in *XListConcatenateBackRequest, opts ...grpc.CallOption) (*XListConcatenateBackResponse, error) {
	out := new(XListConcatenateBackResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/ListConcatenateBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) SortedSetPut(ctx context.Context, in *XSortedSetPutRequest, opts ...grpc.CallOption) (*XSortedSetPutResponse, error) {
	out := new(XSortedSetPutResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/SortedSetPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) SortedSetFetch(ctx context.Context, in *XSortedSetFetchRequest, opts ...grpc.CallOption) (*XSortedSetFetchResponse, error) {
	out := new(XSortedSetFetchResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/SortedSetFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) SortedSetGetScore(ctx context.Context, in *XSortedSetGetScoreRequest, opts ...grpc.CallOption) (*XSortedSetGetScoreResponse, error) {
	out := new(XSortedSetGetScoreResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/SortedSetGetScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) SortedSetRemove(ctx context.Context, in *XSortedSetRemoveRequest, opts ...grpc.CallOption) (*XSortedSetRemoveResponse, error) {
	out := new(XSortedSetRemoveResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/SortedSetRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) SortedSetIncrement(ctx context.Context, in *XSortedSetIncrementRequest, opts ...grpc.CallOption) (*XSortedSetIncrementResponse, error) {
	out := new(XSortedSetIncrementResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/SortedSetIncrement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scsClient) SortedSetGetRank(ctx context.Context, in *XSortedSetGetRankRequest, opts ...grpc.CallOption) (*XSortedSetGetRankResponse, error) {
	out := new(XSortedSetGetRankResponse)
	err := c.cc.Invoke(ctx, "/cache_client.Scs/SortedSetGetRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScsServer is the server API for Scs service.
// All implementations must embed UnimplementedScsServer
// for forward compatibility
type ScsServer interface {
	Get(context.Context, *XGetRequest) (*XGetResponse, error)
	Set(context.Context, *XSetRequest) (*XSetResponse, error)
	SetIfNotExists(context.Context, *XSetIfNotExistsRequest) (*XSetIfNotExistsResponse, error)
	Delete(context.Context, *XDeleteRequest) (*XDeleteResponse, error)
	Increment(context.Context, *XIncrementRequest) (*XIncrementResponse, error)
	DictionaryGet(context.Context, *XDictionaryGetRequest) (*XDictionaryGetResponse, error)
	DictionaryFetch(context.Context, *XDictionaryFetchRequest) (*XDictionaryFetchResponse, error)
	DictionarySet(context.Context, *XDictionarySetRequest) (*XDictionarySetResponse, error)
	DictionaryIncrement(context.Context, *XDictionaryIncrementRequest) (*XDictionaryIncrementResponse, error)
	DictionaryDelete(context.Context, *XDictionaryDeleteRequest) (*XDictionaryDeleteResponse, error)
	SetFetch(context.Context, *XSetFetchRequest) (*XSetFetchResponse, error)
	SetUnion(context.Context, *XSetUnionRequest) (*XSetUnionResponse, error)
	SetDifference(context.Context, *XSetDifferenceRequest) (*XSetDifferenceResponse, error)
	ListPushFront(context.Context, *XListPushFrontRequest) (*XListPushFrontResponse, error)
	ListPushBack(context.Context, *XListPushBackRequest) (*XListPushBackResponse, error)
	ListPopFront(context.Context, *XListPopFrontRequest) (*XListPopFrontResponse, error)
	ListPopBack(context.Context, *XListPopBackRequest) (*XListPopBackResponse, error)
	ListErase(context.Context, *XListEraseRequest) (*XListEraseResponse, error)
	ListRemove(context.Context, *XListRemoveRequest) (*XListRemoveResponse, error)
	ListFetch(context.Context, *XListFetchRequest) (*XListFetchResponse, error)
	ListLength(context.Context, *XListLengthRequest) (*XListLengthResponse, error)
	ListConcatenateFront(context.Context, *XListConcatenateFrontRequest) (*XListConcatenateFrontResponse, error)
	ListConcatenateBack(context.Context, *XListConcatenateBackRequest) (*XListConcatenateBackResponse, error)
	// Add or Updates new element with its score to the Sorted Set.
	// If sorted set doesn't exist, a new one is created with the specified
	// element and its associated score.
	// If an element exists, then its associate score gets overridden with the one
	// provided in this operation.
	SortedSetPut(context.Context, *XSortedSetPutRequest) (*XSortedSetPutResponse, error)
	// Fetches all the elements in the sorted set.
	SortedSetFetch(context.Context, *XSortedSetFetchRequest) (*XSortedSetFetchResponse, error)
	// Gets the specified element and its associated score if it exists in the
	// sorted set.
	SortedSetGetScore(context.Context, *XSortedSetGetScoreRequest) (*XSortedSetGetScoreResponse, error)
	// Removes specified elements and their associated scores
	SortedSetRemove(context.Context, *XSortedSetRemoveRequest) (*XSortedSetRemoveResponse, error)
	// Changes the score associated with the element by specified amount.
	// If the provided amount is negative, then the score associated with the
	// element is decremented.
	// If the element that needs to be incremented isn't present in the sorted
	// set, it is added with specified number as the score.
	// If the set itself doesn't exist then a new one with specified element and
	// score is created.
	SortedSetIncrement(context.Context, *XSortedSetIncrementRequest) (*XSortedSetIncrementResponse, error)
	// Gives the rank of an element.
	SortedSetGetRank(context.Context, *XSortedSetGetRankRequest) (*XSortedSetGetRankResponse, error)
	mustEmbedUnimplementedScsServer()
}

// UnimplementedScsServer must be embedded to have forward compatible implementations.
type UnimplementedScsServer struct {
}

func (UnimplementedScsServer) Get(context.Context, *XGetRequest) (*XGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedScsServer) Set(context.Context, *XSetRequest) (*XSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedScsServer) SetIfNotExists(context.Context, *XSetIfNotExistsRequest) (*XSetIfNotExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIfNotExists not implemented")
}
func (UnimplementedScsServer) Delete(context.Context, *XDeleteRequest) (*XDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedScsServer) Increment(context.Context, *XIncrementRequest) (*XIncrementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (UnimplementedScsServer) DictionaryGet(context.Context, *XDictionaryGetRequest) (*XDictionaryGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictionaryGet not implemented")
}
func (UnimplementedScsServer) DictionaryFetch(context.Context, *XDictionaryFetchRequest) (*XDictionaryFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictionaryFetch not implemented")
}
func (UnimplementedScsServer) DictionarySet(context.Context, *XDictionarySetRequest) (*XDictionarySetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictionarySet not implemented")
}
func (UnimplementedScsServer) DictionaryIncrement(context.Context, *XDictionaryIncrementRequest) (*XDictionaryIncrementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictionaryIncrement not implemented")
}
func (UnimplementedScsServer) DictionaryDelete(context.Context, *XDictionaryDeleteRequest) (*XDictionaryDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictionaryDelete not implemented")
}
func (UnimplementedScsServer) SetFetch(context.Context, *XSetFetchRequest) (*XSetFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFetch not implemented")
}
func (UnimplementedScsServer) SetUnion(context.Context, *XSetUnionRequest) (*XSetUnionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUnion not implemented")
}
func (UnimplementedScsServer) SetDifference(context.Context, *XSetDifferenceRequest) (*XSetDifferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDifference not implemented")
}
func (UnimplementedScsServer) ListPushFront(context.Context, *XListPushFrontRequest) (*XListPushFrontResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPushFront not implemented")
}
func (UnimplementedScsServer) ListPushBack(context.Context, *XListPushBackRequest) (*XListPushBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPushBack not implemented")
}
func (UnimplementedScsServer) ListPopFront(context.Context, *XListPopFrontRequest) (*XListPopFrontResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPopFront not implemented")
}
func (UnimplementedScsServer) ListPopBack(context.Context, *XListPopBackRequest) (*XListPopBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPopBack not implemented")
}
func (UnimplementedScsServer) ListErase(context.Context, *XListEraseRequest) (*XListEraseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListErase not implemented")
}
func (UnimplementedScsServer) ListRemove(context.Context, *XListRemoveRequest) (*XListRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRemove not implemented")
}
func (UnimplementedScsServer) ListFetch(context.Context, *XListFetchRequest) (*XListFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFetch not implemented")
}
func (UnimplementedScsServer) ListLength(context.Context, *XListLengthRequest) (*XListLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLength not implemented")
}
func (UnimplementedScsServer) ListConcatenateFront(context.Context, *XListConcatenateFrontRequest) (*XListConcatenateFrontResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConcatenateFront not implemented")
}
func (UnimplementedScsServer) ListConcatenateBack(context.Context, *XListConcatenateBackRequest) (*XListConcatenateBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConcatenateBack not implemented")
}
func (UnimplementedScsServer) SortedSetPut(context.Context, *XSortedSetPutRequest) (*XSortedSetPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortedSetPut not implemented")
}
func (UnimplementedScsServer) SortedSetFetch(context.Context, *XSortedSetFetchRequest) (*XSortedSetFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortedSetFetch not implemented")
}
func (UnimplementedScsServer) SortedSetGetScore(context.Context, *XSortedSetGetScoreRequest) (*XSortedSetGetScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortedSetGetScore not implemented")
}
func (UnimplementedScsServer) SortedSetRemove(context.Context, *XSortedSetRemoveRequest) (*XSortedSetRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortedSetRemove not implemented")
}
func (UnimplementedScsServer) SortedSetIncrement(context.Context, *XSortedSetIncrementRequest) (*XSortedSetIncrementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortedSetIncrement not implemented")
}
func (UnimplementedScsServer) SortedSetGetRank(context.Context, *XSortedSetGetRankRequest) (*XSortedSetGetRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortedSetGetRank not implemented")
}
func (UnimplementedScsServer) mustEmbedUnimplementedScsServer() {}

// UnsafeScsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScsServer will
// result in compilation errors.
type UnsafeScsServer interface {
	mustEmbedUnimplementedScsServer()
}

func RegisterScsServer(s grpc.ServiceRegistrar, srv ScsServer) {
	s.RegisterService(&Scs_ServiceDesc, srv)
}

func _Scs_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).Get(ctx, req.(*XGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).Set(ctx, req.(*XSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_SetIfNotExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XSetIfNotExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).SetIfNotExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/SetIfNotExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).SetIfNotExists(ctx, req.(*XSetIfNotExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).Delete(ctx, req.(*XDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XIncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).Increment(ctx, req.(*XIncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_DictionaryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XDictionaryGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).DictionaryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/DictionaryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).DictionaryGet(ctx, req.(*XDictionaryGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_DictionaryFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XDictionaryFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).DictionaryFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/DictionaryFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).DictionaryFetch(ctx, req.(*XDictionaryFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_DictionarySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XDictionarySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).DictionarySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/DictionarySet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).DictionarySet(ctx, req.(*XDictionarySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_DictionaryIncrement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XDictionaryIncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).DictionaryIncrement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/DictionaryIncrement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).DictionaryIncrement(ctx, req.(*XDictionaryIncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_DictionaryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XDictionaryDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).DictionaryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/DictionaryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).DictionaryDelete(ctx, req.(*XDictionaryDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_SetFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XSetFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).SetFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/SetFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).SetFetch(ctx, req.(*XSetFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_SetUnion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XSetUnionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).SetUnion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/SetUnion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).SetUnion(ctx, req.(*XSetUnionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_SetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XSetDifferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).SetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/SetDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).SetDifference(ctx, req.(*XSetDifferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_ListPushFront_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XListPushFrontRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).ListPushFront(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/ListPushFront",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).ListPushFront(ctx, req.(*XListPushFrontRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_ListPushBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XListPushBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).ListPushBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/ListPushBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).ListPushBack(ctx, req.(*XListPushBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_ListPopFront_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XListPopFrontRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).ListPopFront(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/ListPopFront",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).ListPopFront(ctx, req.(*XListPopFrontRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_ListPopBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XListPopBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).ListPopBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/ListPopBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).ListPopBack(ctx, req.(*XListPopBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_ListErase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XListEraseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).ListErase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/ListErase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).ListErase(ctx, req.(*XListEraseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_ListRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XListRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).ListRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/ListRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).ListRemove(ctx, req.(*XListRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_ListFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XListFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).ListFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/ListFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).ListFetch(ctx, req.(*XListFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_ListLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XListLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).ListLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/ListLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).ListLength(ctx, req.(*XListLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_ListConcatenateFront_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XListConcatenateFrontRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).ListConcatenateFront(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/ListConcatenateFront",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).ListConcatenateFront(ctx, req.(*XListConcatenateFrontRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_ListConcatenateBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XListConcatenateBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).ListConcatenateBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/ListConcatenateBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).ListConcatenateBack(ctx, req.(*XListConcatenateBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_SortedSetPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XSortedSetPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).SortedSetPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/SortedSetPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).SortedSetPut(ctx, req.(*XSortedSetPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_SortedSetFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XSortedSetFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).SortedSetFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/SortedSetFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).SortedSetFetch(ctx, req.(*XSortedSetFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_SortedSetGetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XSortedSetGetScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).SortedSetGetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/SortedSetGetScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).SortedSetGetScore(ctx, req.(*XSortedSetGetScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_SortedSetRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XSortedSetRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).SortedSetRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/SortedSetRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).SortedSetRemove(ctx, req.(*XSortedSetRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_SortedSetIncrement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XSortedSetIncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).SortedSetIncrement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/SortedSetIncrement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).SortedSetIncrement(ctx, req.(*XSortedSetIncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scs_SortedSetGetRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XSortedSetGetRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScsServer).SortedSetGetRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache_client.Scs/SortedSetGetRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScsServer).SortedSetGetRank(ctx, req.(*XSortedSetGetRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Scs_ServiceDesc is the grpc.ServiceDesc for Scs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cache_client.Scs",
	HandlerType: (*ScsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Scs_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Scs_Set_Handler,
		},
		{
			MethodName: "SetIfNotExists",
			Handler:    _Scs_SetIfNotExists_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Scs_Delete_Handler,
		},
		{
			MethodName: "Increment",
			Handler:    _Scs_Increment_Handler,
		},
		{
			MethodName: "DictionaryGet",
			Handler:    _Scs_DictionaryGet_Handler,
		},
		{
			MethodName: "DictionaryFetch",
			Handler:    _Scs_DictionaryFetch_Handler,
		},
		{
			MethodName: "DictionarySet",
			Handler:    _Scs_DictionarySet_Handler,
		},
		{
			MethodName: "DictionaryIncrement",
			Handler:    _Scs_DictionaryIncrement_Handler,
		},
		{
			MethodName: "DictionaryDelete",
			Handler:    _Scs_DictionaryDelete_Handler,
		},
		{
			MethodName: "SetFetch",
			Handler:    _Scs_SetFetch_Handler,
		},
		{
			MethodName: "SetUnion",
			Handler:    _Scs_SetUnion_Handler,
		},
		{
			MethodName: "SetDifference",
			Handler:    _Scs_SetDifference_Handler,
		},
		{
			MethodName: "ListPushFront",
			Handler:    _Scs_ListPushFront_Handler,
		},
		{
			MethodName: "ListPushBack",
			Handler:    _Scs_ListPushBack_Handler,
		},
		{
			MethodName: "ListPopFront",
			Handler:    _Scs_ListPopFront_Handler,
		},
		{
			MethodName: "ListPopBack",
			Handler:    _Scs_ListPopBack_Handler,
		},
		{
			MethodName: "ListErase",
			Handler:    _Scs_ListErase_Handler,
		},
		{
			MethodName: "ListRemove",
			Handler:    _Scs_ListRemove_Handler,
		},
		{
			MethodName: "ListFetch",
			Handler:    _Scs_ListFetch_Handler,
		},
		{
			MethodName: "ListLength",
			Handler:    _Scs_ListLength_Handler,
		},
		{
			MethodName: "ListConcatenateFront",
			Handler:    _Scs_ListConcatenateFront_Handler,
		},
		{
			MethodName: "ListConcatenateBack",
			Handler:    _Scs_ListConcatenateBack_Handler,
		},
		{
			MethodName: "SortedSetPut",
			Handler:    _Scs_SortedSetPut_Handler,
		},
		{
			MethodName: "SortedSetFetch",
			Handler:    _Scs_SortedSetFetch_Handler,
		},
		{
			MethodName: "SortedSetGetScore",
			Handler:    _Scs_SortedSetGetScore_Handler,
		},
		{
			MethodName: "SortedSetRemove",
			Handler:    _Scs_SortedSetRemove_Handler,
		},
		{
			MethodName: "SortedSetIncrement",
			Handler:    _Scs_SortedSetIncrement_Handler,
		},
		{
			MethodName: "SortedSetGetRank",
			Handler:    _Scs_SortedSetGetRank_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/cacheclient.proto",
}
