// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.18.1
// source: webhook.proto

package client_sdk_go

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Webhook_PutWebhook_FullMethodName          = "/webhook.Webhook/PutWebhook"
	Webhook_DeleteWebhook_FullMethodName       = "/webhook.Webhook/DeleteWebhook"
	Webhook_ListWebhooks_FullMethodName        = "/webhook.Webhook/ListWebhooks"
	Webhook_GetWebhookSecret_FullMethodName    = "/webhook.Webhook/GetWebhookSecret"
	Webhook_RotateWebhookSecret_FullMethodName = "/webhook.Webhook/RotateWebhookSecret"
)

// WebhookClient is the client API for Webhook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A Webhook is a mechanism to consume messages on a Topic.
// The primary purpose of webhooks in Momento is to enable
// Lambda to be a subscriber to the messages sent on a topic.
// Secondarily, webhooks open us up to a whole lot of integrations
// (slack, discord, event bridge, etc).
type WebhookClient interface {
	PutWebhook(ctx context.Context, in *XPutWebhookRequest, opts ...grpc.CallOption) (*XPutWebhookResponse, error)
	DeleteWebhook(ctx context.Context, in *XDeleteWebhookRequest, opts ...grpc.CallOption) (*XDeleteWebhookResponse, error)
	ListWebhooks(ctx context.Context, in *XListWebhookRequest, opts ...grpc.CallOption) (*XListWebhooksResponse, error)
	GetWebhookSecret(ctx context.Context, in *XGetWebhookSecretRequest, opts ...grpc.CallOption) (*XGetWebhookSecretResponse, error)
	RotateWebhookSecret(ctx context.Context, in *XRotateWebhookSecretRequest, opts ...grpc.CallOption) (*XRotateWebhookSecretResponse, error)
}

type webhookClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookClient(cc grpc.ClientConnInterface) WebhookClient {
	return &webhookClient{cc}
}

func (c *webhookClient) PutWebhook(ctx context.Context, in *XPutWebhookRequest, opts ...grpc.CallOption) (*XPutWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XPutWebhookResponse)
	err := c.cc.Invoke(ctx, Webhook_PutWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) DeleteWebhook(ctx context.Context, in *XDeleteWebhookRequest, opts ...grpc.CallOption) (*XDeleteWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XDeleteWebhookResponse)
	err := c.cc.Invoke(ctx, Webhook_DeleteWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) ListWebhooks(ctx context.Context, in *XListWebhookRequest, opts ...grpc.CallOption) (*XListWebhooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XListWebhooksResponse)
	err := c.cc.Invoke(ctx, Webhook_ListWebhooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) GetWebhookSecret(ctx context.Context, in *XGetWebhookSecretRequest, opts ...grpc.CallOption) (*XGetWebhookSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XGetWebhookSecretResponse)
	err := c.cc.Invoke(ctx, Webhook_GetWebhookSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) RotateWebhookSecret(ctx context.Context, in *XRotateWebhookSecretRequest, opts ...grpc.CallOption) (*XRotateWebhookSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XRotateWebhookSecretResponse)
	err := c.cc.Invoke(ctx, Webhook_RotateWebhookSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookServer is the server API for Webhook service.
// All implementations must embed UnimplementedWebhookServer
// for forward compatibility
//
// A Webhook is a mechanism to consume messages on a Topic.
// The primary purpose of webhooks in Momento is to enable
// Lambda to be a subscriber to the messages sent on a topic.
// Secondarily, webhooks open us up to a whole lot of integrations
// (slack, discord, event bridge, etc).
type WebhookServer interface {
	PutWebhook(context.Context, *XPutWebhookRequest) (*XPutWebhookResponse, error)
	DeleteWebhook(context.Context, *XDeleteWebhookRequest) (*XDeleteWebhookResponse, error)
	ListWebhooks(context.Context, *XListWebhookRequest) (*XListWebhooksResponse, error)
	GetWebhookSecret(context.Context, *XGetWebhookSecretRequest) (*XGetWebhookSecretResponse, error)
	RotateWebhookSecret(context.Context, *XRotateWebhookSecretRequest) (*XRotateWebhookSecretResponse, error)
	mustEmbedUnimplementedWebhookServer()
}

// UnimplementedWebhookServer must be embedded to have forward compatible implementations.
type UnimplementedWebhookServer struct {
}

func (UnimplementedWebhookServer) PutWebhook(context.Context, *XPutWebhookRequest) (*XPutWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutWebhook not implemented")
}
func (UnimplementedWebhookServer) DeleteWebhook(context.Context, *XDeleteWebhookRequest) (*XDeleteWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (UnimplementedWebhookServer) ListWebhooks(context.Context, *XListWebhookRequest) (*XListWebhooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhooks not implemented")
}
func (UnimplementedWebhookServer) GetWebhookSecret(context.Context, *XGetWebhookSecretRequest) (*XGetWebhookSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhookSecret not implemented")
}
func (UnimplementedWebhookServer) RotateWebhookSecret(context.Context, *XRotateWebhookSecretRequest) (*XRotateWebhookSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateWebhookSecret not implemented")
}
func (UnimplementedWebhookServer) mustEmbedUnimplementedWebhookServer() {}

// UnsafeWebhookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookServer will
// result in compilation errors.
type UnsafeWebhookServer interface {
	mustEmbedUnimplementedWebhookServer()
}

func RegisterWebhookServer(s grpc.ServiceRegistrar, srv WebhookServer) {
	s.RegisterService(&Webhook_ServiceDesc, srv)
}

func _Webhook_PutWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XPutWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).PutWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_PutWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).PutWebhook(ctx, req.(*XPutWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XDeleteWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_DeleteWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).DeleteWebhook(ctx, req.(*XDeleteWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_ListWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XListWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).ListWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_ListWebhooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).ListWebhooks(ctx, req.(*XListWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_GetWebhookSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XGetWebhookSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).GetWebhookSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_GetWebhookSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).GetWebhookSecret(ctx, req.(*XGetWebhookSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_RotateWebhookSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XRotateWebhookSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).RotateWebhookSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_RotateWebhookSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).RotateWebhookSecret(ctx, req.(*XRotateWebhookSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Webhook_ServiceDesc is the grpc.ServiceDesc for Webhook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Webhook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webhook.Webhook",
	HandlerType: (*WebhookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutWebhook",
			Handler:    _Webhook_PutWebhook_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _Webhook_DeleteWebhook_Handler,
		},
		{
			MethodName: "ListWebhooks",
			Handler:    _Webhook_ListWebhooks_Handler,
		},
		{
			MethodName: "GetWebhookSecret",
			Handler:    _Webhook_GetWebhookSecret_Handler,
		},
		{
			MethodName: "RotateWebhookSecret",
			Handler:    _Webhook_RotateWebhookSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webhook.proto",
}
