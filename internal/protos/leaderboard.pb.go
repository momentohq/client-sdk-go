// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.18.1
// source: leaderboard.proto

package client_sdk_go

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type XOrder int32

const (
	// Ascending order (0 is the lowest-scoring rank)
	XOrder_ASCENDING XOrder = 0
	// Descending order (0 is the highest-scoring rank)
	XOrder_DESCENDING XOrder = 1
)

// Enum value maps for XOrder.
var (
	XOrder_name = map[int32]string{
		0: "ASCENDING",
		1: "DESCENDING",
	}
	XOrder_value = map[string]int32{
		"ASCENDING":  0,
		"DESCENDING": 1,
	}
)

func (x XOrder) Enum() *XOrder {
	p := new(XOrder)
	*p = x
	return p
}

func (x XOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_leaderboard_proto_enumTypes[0].Descriptor()
}

func (XOrder) Type() protoreflect.EnumType {
	return &file_leaderboard_proto_enumTypes[0]
}

func (x XOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XOrder.Descriptor instead.
func (XOrder) EnumDescriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{0}
}

// Leaderboards are made up of many of these.
type XElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A player identifier, session identifier, browser identifier or whatever other kind of
	// identifier you use for this scoreboard. The full unsigned 64 bit range is allowed here,
	// between 0 and 2^63-1 inclusive.
	// An id can only appear in a leaderboard one time. You can't have 2 scores for 1 player,
	// unless that player has 2 ids!
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The value by which this element is sorted within the leaderboard.
	Score float64 `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *XElement) Reset() {
	*x = XElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XElement) ProtoMessage() {}

func (x *XElement) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XElement.ProtoReflect.Descriptor instead.
func (*XElement) Descriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{0}
}

func (x *XElement) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *XElement) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

// Query APIs returning RankedElement offer the familiar Element id and score tuple, but they
// also include the rank per the individual API's ranking semantic.
type XRankedElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Rank  uint32  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	Score float64 `protobuf:"fixed64,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *XRankedElement) Reset() {
	*x = XRankedElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XRankedElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XRankedElement) ProtoMessage() {}

func (x *XRankedElement) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XRankedElement.ProtoReflect.Descriptor instead.
func (*XRankedElement) Descriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{1}
}

func (x *XRankedElement) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *XRankedElement) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *XRankedElement) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

// Query APIs using RankRange expect a limit of 8192 elements. Requesting a range wider than
// that is expected to return an error.
//
// RankRange models half-open ranges: 0..4 refers to elements 0, 1, 2 and 3.
//
// Example permissible ranges:
// * 0..8192
// * 1..8193
// * 123..8315
// * 0..1
// * 1..4
// * 13..17
//
// Example error ranges:
// * 0..0
// * 4..3
// * 0..8193
type XRankRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartInclusive uint32 `protobuf:"varint,1,opt,name=start_inclusive,json=startInclusive,proto3" json:"start_inclusive,omitempty"`
	EndExclusive   uint32 `protobuf:"varint,2,opt,name=end_exclusive,json=endExclusive,proto3" json:"end_exclusive,omitempty"`
}

func (x *XRankRange) Reset() {
	*x = XRankRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XRankRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XRankRange) ProtoMessage() {}

func (x *XRankRange) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XRankRange.ProtoReflect.Descriptor instead.
func (*XRankRange) Descriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{2}
}

func (x *XRankRange) GetStartInclusive() uint32 {
	if x != nil {
		return x.StartInclusive
	}
	return 0
}

func (x *XRankRange) GetEndExclusive() uint32 {
	if x != nil {
		return x.EndExclusive
	}
	return 0
}

// Query APIs using ScoreRange may match more than the limit of 8192 elements. These apis will
// include an offset and limit parameter pair, which can be used to page through score ranges
// matching many elements.
//
// ScoreRange models half-open ranges: 0..4 refers to scores 0, 1.1234, 2.5 and 3.999.
type XScoreRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Min:
	//
	//	*XScoreRange_UnboundedMin
	//	*XScoreRange_MinInclusive
	Min isXScoreRange_Min `protobuf_oneof:"min"`
	// Types that are assignable to Max:
	//
	//	*XScoreRange_UnboundedMax
	//	*XScoreRange_MaxExclusive
	Max isXScoreRange_Max `protobuf_oneof:"max"`
}

func (x *XScoreRange) Reset() {
	*x = XScoreRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XScoreRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XScoreRange) ProtoMessage() {}

func (x *XScoreRange) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XScoreRange.ProtoReflect.Descriptor instead.
func (*XScoreRange) Descriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{3}
}

func (m *XScoreRange) GetMin() isXScoreRange_Min {
	if m != nil {
		return m.Min
	}
	return nil
}

func (x *XScoreRange) GetUnboundedMin() *XUnbounded {
	if x, ok := x.GetMin().(*XScoreRange_UnboundedMin); ok {
		return x.UnboundedMin
	}
	return nil
}

func (x *XScoreRange) GetMinInclusive() float64 {
	if x, ok := x.GetMin().(*XScoreRange_MinInclusive); ok {
		return x.MinInclusive
	}
	return 0
}

func (m *XScoreRange) GetMax() isXScoreRange_Max {
	if m != nil {
		return m.Max
	}
	return nil
}

func (x *XScoreRange) GetUnboundedMax() *XUnbounded {
	if x, ok := x.GetMax().(*XScoreRange_UnboundedMax); ok {
		return x.UnboundedMax
	}
	return nil
}

func (x *XScoreRange) GetMaxExclusive() float64 {
	if x, ok := x.GetMax().(*XScoreRange_MaxExclusive); ok {
		return x.MaxExclusive
	}
	return 0
}

type isXScoreRange_Min interface {
	isXScoreRange_Min()
}

type XScoreRange_UnboundedMin struct {
	UnboundedMin *XUnbounded `protobuf:"bytes,1,opt,name=unbounded_min,json=unboundedMin,proto3,oneof"`
}

type XScoreRange_MinInclusive struct {
	// IEEE 754 single precision 64 bit floating point number.
	// Momento does not support NaN or Inf in leaderboards.
	MinInclusive float64 `protobuf:"fixed64,5,opt,name=min_inclusive,json=minInclusive,proto3,oneof"`
}

func (*XScoreRange_UnboundedMin) isXScoreRange_Min() {}

func (*XScoreRange_MinInclusive) isXScoreRange_Min() {}

type isXScoreRange_Max interface {
	isXScoreRange_Max()
}

type XScoreRange_UnboundedMax struct {
	UnboundedMax *XUnbounded `protobuf:"bytes,3,opt,name=unbounded_max,json=unboundedMax,proto3,oneof"`
}

type XScoreRange_MaxExclusive struct {
	// IEEE 754 single precision 64 bit floating point number.
	// Momento does not support NaN or Inf in leaderboards.
	MaxExclusive float64 `protobuf:"fixed64,6,opt,name=max_exclusive,json=maxExclusive,proto3,oneof"`
}

func (*XScoreRange_UnboundedMax) isXScoreRange_Max() {}

func (*XScoreRange_MaxExclusive) isXScoreRange_Max() {}

type XDeleteLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheName   string `protobuf:"bytes,1,opt,name=cache_name,json=cacheName,proto3" json:"cache_name,omitempty"`
	Leaderboard string `protobuf:"bytes,2,opt,name=leaderboard,proto3" json:"leaderboard,omitempty"`
}

func (x *XDeleteLeaderboardRequest) Reset() {
	*x = XDeleteLeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XDeleteLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XDeleteLeaderboardRequest) ProtoMessage() {}

func (x *XDeleteLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XDeleteLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*XDeleteLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{4}
}

func (x *XDeleteLeaderboardRequest) GetCacheName() string {
	if x != nil {
		return x.CacheName
	}
	return ""
}

func (x *XDeleteLeaderboardRequest) GetLeaderboard() string {
	if x != nil {
		return x.Leaderboard
	}
	return ""
}

type XGetLeaderboardLengthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheName   string `protobuf:"bytes,1,opt,name=cache_name,json=cacheName,proto3" json:"cache_name,omitempty"`
	Leaderboard string `protobuf:"bytes,2,opt,name=leaderboard,proto3" json:"leaderboard,omitempty"`
}

func (x *XGetLeaderboardLengthRequest) Reset() {
	*x = XGetLeaderboardLengthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XGetLeaderboardLengthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XGetLeaderboardLengthRequest) ProtoMessage() {}

func (x *XGetLeaderboardLengthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XGetLeaderboardLengthRequest.ProtoReflect.Descriptor instead.
func (*XGetLeaderboardLengthRequest) Descriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{5}
}

func (x *XGetLeaderboardLengthRequest) GetCacheName() string {
	if x != nil {
		return x.CacheName
	}
	return ""
}

func (x *XGetLeaderboardLengthRequest) GetLeaderboard() string {
	if x != nil {
		return x.Leaderboard
	}
	return ""
}

type XGetLeaderboardLengthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *XGetLeaderboardLengthResponse) Reset() {
	*x = XGetLeaderboardLengthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XGetLeaderboardLengthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XGetLeaderboardLengthResponse) ProtoMessage() {}

func (x *XGetLeaderboardLengthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XGetLeaderboardLengthResponse.ProtoReflect.Descriptor instead.
func (*XGetLeaderboardLengthResponse) Descriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{6}
}

func (x *XGetLeaderboardLengthResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type XUpsertElementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheName   string `protobuf:"bytes,1,opt,name=cache_name,json=cacheName,proto3" json:"cache_name,omitempty"`
	Leaderboard string `protobuf:"bytes,2,opt,name=leaderboard,proto3" json:"leaderboard,omitempty"`
	// You can have up to 8192 elements in this list.
	Elements []*XElement `protobuf:"bytes,3,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *XUpsertElementsRequest) Reset() {
	*x = XUpsertElementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XUpsertElementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XUpsertElementsRequest) ProtoMessage() {}

func (x *XUpsertElementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XUpsertElementsRequest.ProtoReflect.Descriptor instead.
func (*XUpsertElementsRequest) Descriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{7}
}

func (x *XUpsertElementsRequest) GetCacheName() string {
	if x != nil {
		return x.CacheName
	}
	return ""
}

func (x *XUpsertElementsRequest) GetLeaderboard() string {
	if x != nil {
		return x.Leaderboard
	}
	return ""
}

func (x *XUpsertElementsRequest) GetElements() []*XElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

type XGetByRankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheName   string      `protobuf:"bytes,1,opt,name=cache_name,json=cacheName,proto3" json:"cache_name,omitempty"`
	Leaderboard string      `protobuf:"bytes,2,opt,name=leaderboard,proto3" json:"leaderboard,omitempty"`
	RankRange   *XRankRange `protobuf:"bytes,3,opt,name=rank_range,json=rankRange,proto3" json:"rank_range,omitempty"`
	Order       XOrder      `protobuf:"varint,4,opt,name=order,proto3,enum=leaderboard.XOrder" json:"order,omitempty"`
}

func (x *XGetByRankRequest) Reset() {
	*x = XGetByRankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XGetByRankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XGetByRankRequest) ProtoMessage() {}

func (x *XGetByRankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XGetByRankRequest.ProtoReflect.Descriptor instead.
func (*XGetByRankRequest) Descriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{8}
}

func (x *XGetByRankRequest) GetCacheName() string {
	if x != nil {
		return x.CacheName
	}
	return ""
}

func (x *XGetByRankRequest) GetLeaderboard() string {
	if x != nil {
		return x.Leaderboard
	}
	return ""
}

func (x *XGetByRankRequest) GetRankRange() *XRankRange {
	if x != nil {
		return x.RankRange
	}
	return nil
}

func (x *XGetByRankRequest) GetOrder() XOrder {
	if x != nil {
		return x.Order
	}
	return XOrder_ASCENDING
}

type XGetByRankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*XRankedElement `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *XGetByRankResponse) Reset() {
	*x = XGetByRankResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XGetByRankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XGetByRankResponse) ProtoMessage() {}

func (x *XGetByRankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XGetByRankResponse.ProtoReflect.Descriptor instead.
func (*XGetByRankResponse) Descriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{9}
}

func (x *XGetByRankResponse) GetElements() []*XRankedElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

type XGetRankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheName   string   `protobuf:"bytes,1,opt,name=cache_name,json=cacheName,proto3" json:"cache_name,omitempty"`
	Leaderboard string   `protobuf:"bytes,2,opt,name=leaderboard,proto3" json:"leaderboard,omitempty"`
	Ids         []uint32 `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Order       XOrder   `protobuf:"varint,4,opt,name=order,proto3,enum=leaderboard.XOrder" json:"order,omitempty"`
}

func (x *XGetRankRequest) Reset() {
	*x = XGetRankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XGetRankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XGetRankRequest) ProtoMessage() {}

func (x *XGetRankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XGetRankRequest.ProtoReflect.Descriptor instead.
func (*XGetRankRequest) Descriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{10}
}

func (x *XGetRankRequest) GetCacheName() string {
	if x != nil {
		return x.CacheName
	}
	return ""
}

func (x *XGetRankRequest) GetLeaderboard() string {
	if x != nil {
		return x.Leaderboard
	}
	return ""
}

func (x *XGetRankRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *XGetRankRequest) GetOrder() XOrder {
	if x != nil {
		return x.Order
	}
	return XOrder_ASCENDING
}

type XGetRankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*XRankedElement `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *XGetRankResponse) Reset() {
	*x = XGetRankResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XGetRankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XGetRankResponse) ProtoMessage() {}

func (x *XGetRankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XGetRankResponse.ProtoReflect.Descriptor instead.
func (*XGetRankResponse) Descriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{11}
}

func (x *XGetRankResponse) GetElements() []*XRankedElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

type XRemoveElementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheName   string `protobuf:"bytes,1,opt,name=cache_name,json=cacheName,proto3" json:"cache_name,omitempty"`
	Leaderboard string `protobuf:"bytes,2,opt,name=leaderboard,proto3" json:"leaderboard,omitempty"`
	// You can have up to 8192 ids in this list.
	Ids []uint32 `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *XRemoveElementsRequest) Reset() {
	*x = XRemoveElementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XRemoveElementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XRemoveElementsRequest) ProtoMessage() {}

func (x *XRemoveElementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XRemoveElementsRequest.ProtoReflect.Descriptor instead.
func (*XRemoveElementsRequest) Descriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{12}
}

func (x *XRemoveElementsRequest) GetCacheName() string {
	if x != nil {
		return x.CacheName
	}
	return ""
}

func (x *XRemoveElementsRequest) GetLeaderboard() string {
	if x != nil {
		return x.Leaderboard
	}
	return ""
}

func (x *XRemoveElementsRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type XGetByScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheName   string       `protobuf:"bytes,1,opt,name=cache_name,json=cacheName,proto3" json:"cache_name,omitempty"`
	Leaderboard string       `protobuf:"bytes,2,opt,name=leaderboard,proto3" json:"leaderboard,omitempty"`
	ScoreRange  *XScoreRange `protobuf:"bytes,3,opt,name=score_range,json=scoreRange,proto3" json:"score_range,omitempty"`
	// Where should we start returning scores from in the elements within this range?
	Offset uint32 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	// How many elements should we limit to returning? (8192 max)
	LimitElements uint32 `protobuf:"varint,5,opt,name=limit_elements,json=limitElements,proto3" json:"limit_elements,omitempty"`
	Order         XOrder `protobuf:"varint,6,opt,name=order,proto3,enum=leaderboard.XOrder" json:"order,omitempty"`
}

func (x *XGetByScoreRequest) Reset() {
	*x = XGetByScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XGetByScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XGetByScoreRequest) ProtoMessage() {}

func (x *XGetByScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XGetByScoreRequest.ProtoReflect.Descriptor instead.
func (*XGetByScoreRequest) Descriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{13}
}

func (x *XGetByScoreRequest) GetCacheName() string {
	if x != nil {
		return x.CacheName
	}
	return ""
}

func (x *XGetByScoreRequest) GetLeaderboard() string {
	if x != nil {
		return x.Leaderboard
	}
	return ""
}

func (x *XGetByScoreRequest) GetScoreRange() *XScoreRange {
	if x != nil {
		return x.ScoreRange
	}
	return nil
}

func (x *XGetByScoreRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *XGetByScoreRequest) GetLimitElements() uint32 {
	if x != nil {
		return x.LimitElements
	}
	return 0
}

func (x *XGetByScoreRequest) GetOrder() XOrder {
	if x != nil {
		return x.Order
	}
	return XOrder_ASCENDING
}

type XGetByScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*XRankedElement `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *XGetByScoreResponse) Reset() {
	*x = XGetByScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XGetByScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XGetByScoreResponse) ProtoMessage() {}

func (x *XGetByScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XGetByScoreResponse.ProtoReflect.Descriptor instead.
func (*XGetByScoreResponse) Descriptor() ([]byte, []int) {
	return file_leaderboard_proto_rawDescGZIP(), []int{14}
}

func (x *XGetByScoreResponse) GetElements() []*XRankedElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

var File_leaderboard_proto protoreflect.FileDescriptor

var file_leaderboard_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36,
	0x0a, 0x08, 0x5f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x50, 0x0a, 0x0e, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x5a, 0x0a, 0x0a, 0x5f, 0x52, 0x61, 0x6e,
	0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x0b, 0x5f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x75, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x5f, 0x55, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x0c, 0x75, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x12,
	0x25, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x75, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x5f, 0x55, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65,
	0x64, 0x48, 0x01, 0x52, 0x0c, 0x75, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x61,
	0x78, 0x12, 0x25, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x42,
	0x05, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x04,
	0x10, 0x05, 0x22, 0x5c, 0x0a, 0x19, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x22, 0x5f, 0x0a, 0x1c, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x22, 0x35, 0x0a, 0x1d, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x5f, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x5f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x5f, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x36,
	0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x72, 0x61, 0x6e,
	0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0x4d, 0x0a, 0x12, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x4b, 0x0a, 0x10, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x6b, 0x0a, 0x16, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xfa, 0x01, 0x0a,
	0x12, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x5f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x5f, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x13, 0x5f, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0x27, 0x0a, 0x06, 0x5f, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x32, 0xbe, 0x04, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x4b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x5f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x45, 0x0a, 0x0e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x23, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x5f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x5f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x5f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6d, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x29, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x5f,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1e, 0x2e, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1f, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x5f,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x5f, 0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x63, 0x0a, 0x10, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x68, 0x71, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x3b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x67, 0x6f, 0xaa, 0x02, 0x1a, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_leaderboard_proto_rawDescOnce sync.Once
	file_leaderboard_proto_rawDescData = file_leaderboard_proto_rawDesc
)

func file_leaderboard_proto_rawDescGZIP() []byte {
	file_leaderboard_proto_rawDescOnce.Do(func() {
		file_leaderboard_proto_rawDescData = protoimpl.X.CompressGZIP(file_leaderboard_proto_rawDescData)
	})
	return file_leaderboard_proto_rawDescData
}

var file_leaderboard_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_leaderboard_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_leaderboard_proto_goTypes = []any{
	(XOrder)(0),                           // 0: leaderboard._Order
	(*XElement)(nil),                      // 1: leaderboard._Element
	(*XRankedElement)(nil),                // 2: leaderboard._RankedElement
	(*XRankRange)(nil),                    // 3: leaderboard._RankRange
	(*XScoreRange)(nil),                   // 4: leaderboard._ScoreRange
	(*XDeleteLeaderboardRequest)(nil),     // 5: leaderboard._DeleteLeaderboardRequest
	(*XGetLeaderboardLengthRequest)(nil),  // 6: leaderboard._GetLeaderboardLengthRequest
	(*XGetLeaderboardLengthResponse)(nil), // 7: leaderboard._GetLeaderboardLengthResponse
	(*XUpsertElementsRequest)(nil),        // 8: leaderboard._UpsertElementsRequest
	(*XGetByRankRequest)(nil),             // 9: leaderboard._GetByRankRequest
	(*XGetByRankResponse)(nil),            // 10: leaderboard._GetByRankResponse
	(*XGetRankRequest)(nil),               // 11: leaderboard._GetRankRequest
	(*XGetRankResponse)(nil),              // 12: leaderboard._GetRankResponse
	(*XRemoveElementsRequest)(nil),        // 13: leaderboard._RemoveElementsRequest
	(*XGetByScoreRequest)(nil),            // 14: leaderboard._GetByScoreRequest
	(*XGetByScoreResponse)(nil),           // 15: leaderboard._GetByScoreResponse
	(*XUnbounded)(nil),                    // 16: common._Unbounded
	(*XEmpty)(nil),                        // 17: common._Empty
}
var file_leaderboard_proto_depIdxs = []int32{
	16, // 0: leaderboard._ScoreRange.unbounded_min:type_name -> common._Unbounded
	16, // 1: leaderboard._ScoreRange.unbounded_max:type_name -> common._Unbounded
	1,  // 2: leaderboard._UpsertElementsRequest.elements:type_name -> leaderboard._Element
	3,  // 3: leaderboard._GetByRankRequest.rank_range:type_name -> leaderboard._RankRange
	0,  // 4: leaderboard._GetByRankRequest.order:type_name -> leaderboard._Order
	2,  // 5: leaderboard._GetByRankResponse.elements:type_name -> leaderboard._RankedElement
	0,  // 6: leaderboard._GetRankRequest.order:type_name -> leaderboard._Order
	2,  // 7: leaderboard._GetRankResponse.elements:type_name -> leaderboard._RankedElement
	4,  // 8: leaderboard._GetByScoreRequest.score_range:type_name -> leaderboard._ScoreRange
	0,  // 9: leaderboard._GetByScoreRequest.order:type_name -> leaderboard._Order
	2,  // 10: leaderboard._GetByScoreResponse.elements:type_name -> leaderboard._RankedElement
	5,  // 11: leaderboard.Leaderboard.DeleteLeaderboard:input_type -> leaderboard._DeleteLeaderboardRequest
	8,  // 12: leaderboard.Leaderboard.UpsertElements:input_type -> leaderboard._UpsertElementsRequest
	13, // 13: leaderboard.Leaderboard.RemoveElements:input_type -> leaderboard._RemoveElementsRequest
	6,  // 14: leaderboard.Leaderboard.GetLeaderboardLength:input_type -> leaderboard._GetLeaderboardLengthRequest
	9,  // 15: leaderboard.Leaderboard.GetByRank:input_type -> leaderboard._GetByRankRequest
	11, // 16: leaderboard.Leaderboard.GetRank:input_type -> leaderboard._GetRankRequest
	14, // 17: leaderboard.Leaderboard.GetByScore:input_type -> leaderboard._GetByScoreRequest
	17, // 18: leaderboard.Leaderboard.DeleteLeaderboard:output_type -> common._Empty
	17, // 19: leaderboard.Leaderboard.UpsertElements:output_type -> common._Empty
	17, // 20: leaderboard.Leaderboard.RemoveElements:output_type -> common._Empty
	7,  // 21: leaderboard.Leaderboard.GetLeaderboardLength:output_type -> leaderboard._GetLeaderboardLengthResponse
	10, // 22: leaderboard.Leaderboard.GetByRank:output_type -> leaderboard._GetByRankResponse
	12, // 23: leaderboard.Leaderboard.GetRank:output_type -> leaderboard._GetRankResponse
	15, // 24: leaderboard.Leaderboard.GetByScore:output_type -> leaderboard._GetByScoreResponse
	18, // [18:25] is the sub-list for method output_type
	11, // [11:18] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_leaderboard_proto_init() }
func file_leaderboard_proto_init() {
	if File_leaderboard_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_leaderboard_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*XElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*XRankedElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*XRankRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*XScoreRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*XDeleteLeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*XGetLeaderboardLengthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*XGetLeaderboardLengthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*XUpsertElementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*XGetByRankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*XGetByRankResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*XGetRankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*XGetRankResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*XRemoveElementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*XGetByScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*XGetByScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_leaderboard_proto_msgTypes[3].OneofWrappers = []any{
		(*XScoreRange_UnboundedMin)(nil),
		(*XScoreRange_MinInclusive)(nil),
		(*XScoreRange_UnboundedMax)(nil),
		(*XScoreRange_MaxExclusive)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_leaderboard_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_leaderboard_proto_goTypes,
		DependencyIndexes: file_leaderboard_proto_depIdxs,
		EnumInfos:         file_leaderboard_proto_enumTypes,
		MessageInfos:      file_leaderboard_proto_msgTypes,
	}.Build()
	File_leaderboard_proto = out.File
	file_leaderboard_proto_rawDesc = nil
	file_leaderboard_proto_goTypes = nil
	file_leaderboard_proto_depIdxs = nil
}
