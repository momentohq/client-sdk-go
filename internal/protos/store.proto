syntax = "proto3";

option go_package = "github.com/momentohq/client-sdk-go;client_sdk_go";
option java_multiple_files = true;
option java_package = "grpc.store";
option csharp_namespace = "Momento.Protos.Store";

package store;

// Found on the `err` trailer for error responses, when the error is sent by the server and it has a relevant value to set
// {
//   Key: "err"
//   Values: [
//      This is to indicate the error is coming from Momento, and not tonic or other middleware
//    "momento_general_err",
//      The server may or may not have tried to process this command, but it was unable
//      to complete it either way. A resource was exhausted which prevented the request
//      from completing.
//    "server_is_busy",
//      Indicates that the stored type for the key supplied isn't compatible with the
//      requested operation
//    "invalid_type",
//      Indicates the item doesn't exist for the given key
//    "item_not_found",
//      Indicates the store doesn't exist
//    "store_not_found"
//   ]
// },
// Found on the `retry_disposition` trailer for error responses, when the value is known by the service
// {
//   Key: "retry_disposition"
//   Values: [
//      This rpc is safe to retry, even if it is non-idempotent. It was not executed by the server.
//    "retryable",
//      This rpc may be safe to retry, but it may have been applied.
//      Non-idempotent commands should not be retried, unless configured explicitly.
//      Idempotent commands should be considered eligible for retry.
//    "unknown"
//   ]
// }

service Store {
  rpc Get(_StoreGetRequest) returns (_StoreGetResponse) {}
  rpc Put(_StorePutRequest) returns (_StorePutResponse) {}
  rpc Delete(_StoreDeleteRequest) returns (_StoreDeleteResponse) {}
}

message _StoreValue {
  oneof value {
    bytes bytes_value = 1;
    string string_value = 2;
    int64 integer_value = 3;
    double double_value = 4;
  }
}

message _StoreGetRequest {
  string key = 1;
}

// This response is for when a get request concludes successfully.
// These are some of the Errors and their corresponding GRPC status codes.
// 1. Invalid argument was provided, value is missing -> grpc code = INVALID_ARGUMENT.  Metadata: "err" -> "momento_general_err"
// 2. Item does not exist. grpc code = NOT_FOUND. Metadata: "err" -> "item_not_found"
// 3. Store not found. grpc code = NOT_FOUND. Metadata: "err" -> "store_not_found"
message _StoreGetResponse {
  _StoreValue value = 1;
}

message _StorePutRequest {
  string key = 1;
  _StoreValue value = 2;
}

// This response is for when a put request concludes successfully.
// These are some of the Errors and their corresponding GRPC status codes.
// 1. Invalid argument was provided, value is missing -> grpc code = INVALID_ARGUMENT.  Metadata: "err" -> "momento_general_err"
// 2. Store is currently busy. grpc code = UNAVAILABLE. Metadata: "err" -> "server_is_busy", "retry_disposition" -> "retryable"
// 3. Store not found. grpc code = NOT_FOUND. Metadata: "err" -> "store_not_found"
message _StorePutResponse { }

message _StoreDeleteRequest {
  string key = 1;
}

// This response is for when a delete request concludes successfully.
// These are some of the Errors and their corresponding GRPC status codes.
// 1. Invalid argument was provided, value is missing -> grpc code = INVALID_ARGUMENT.  Metadata: "err" -> "momento_general_err"
// 2. Store is currently busy. grpc code = UNAVAILABLE. Metadata: "err" -> "server_is_busy", "retry_disposition" -> "retryable"
// 3. Store not found. grpc code = NOT_FOUND. Metadata: "err" -> "store_not_found"
message _StoreDeleteResponse { }
