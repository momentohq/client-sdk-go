syntax = "proto3";

import "permissionmessages.proto";

option go_package = "github.com/momentohq/client-sdk-go;client_sdk_go";
option java_multiple_files = true;
option java_package = "momento.auth";

package auth;

service Auth {
  rpc Login (_LoginRequest) returns (stream _LoginResponse) {}
  // api for initially generating api and refresh tokens
  rpc GenerateApiToken(_GenerateApiTokenRequest) returns (_GenerateApiTokenResponse) {}
  // api for programmatically refreshing api and refresh tokens
  rpc RefreshApiToken(_RefreshApiTokenRequest) returns (_RefreshApiTokenResponse) {}
}

message _LoginRequest {
}

message _LoginResponse {
  oneof state {
    DirectBrowser direct_browser = 1;
    LoggedIn logged_in = 2;
    Message message = 3;
    Error error = 4;
  }

  // Terminal state, login success
  message LoggedIn {
    string session_token = 1;

    // How many seconds the token was valid for when issued.
    // Will vary slightly from reality upon receipt, as
    // time has passed since the token was minted.
    // You might expect to see this true to within 10
    // seconds of client-side timekeeping but as is
    // ever the case, there are no guarantees with
    // public network timing.
    uint32 valid_for_seconds = 2;
  }

  // Terminal state, login error
  message Error {
    string description = 1;
  }

  // Open a browser to a url, for interactive login
  message DirectBrowser {
    string url = 1;
  }

  // Logging info about the login process
  message Message {
    string text = 1;
  }
}

message _GenerateApiTokenRequest {
    // generate a token that will never expire
    message Never {}
    // generate a token that has an expiry
    message Expires {
        // how many seconds do you want the api token to be valid for?
        uint32 valid_for_seconds = 1;
    }

    oneof expiry {
        Never never = 1;
        Expires expires = 2;
    }

    string auth_token = 3;

    permission_messages.Permissions permissions = 4;

    string token_id = 5;

    string description = 6;
}

message _GenerateApiTokenResponse {
    // the api key used for authentication against Momento backend
    string api_key = 1;
    // the token that will allow the api token to be refreshed, which will
    // give you back a new refresh and api token
    string refresh_token = 2;
    // the Momento endpoint that this token is allowed to make requests against
    string endpoint = 3;
    // epoch seconds when the api token expires
    uint64 valid_until = 4;
}

message _RefreshApiTokenRequest {
  // the existing api token to be refreshed
  string api_key = 1;
  // the refresh token that was generated with that api token
  string refresh_token = 2;
}

message _RefreshApiTokenResponse {
  // the new api key used for authentication against Momento backend
  string api_key = 1;
  // the token that will allow the api token to be refreshed, which will
  // give you back a new refresh and api token
  string refresh_token = 2;
  // the Momento endpoint that this token is allowed to make requests against
  string endpoint = 3;
  // epoch seconds when the api token expires
  uint64 valid_until = 4;

}
