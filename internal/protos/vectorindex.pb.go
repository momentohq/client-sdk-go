// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.20.3
// source: vectorindex.proto

package client_sdk_go

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type XItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Vector   *XVector     `protobuf:"bytes,2,opt,name=vector,proto3" json:"vector,omitempty"`
	Metadata []*XMetadata `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *XItem) Reset() {
	*x = XItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XItem) ProtoMessage() {}

func (x *XItem) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XItem.ProtoReflect.Descriptor instead.
func (*XItem) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{0}
}

func (x *XItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *XItem) GetVector() *XVector {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *XItem) GetMetadata() []*XMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type XUpsertItemBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string   `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	Items     []*XItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *XUpsertItemBatchRequest) Reset() {
	*x = XUpsertItemBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XUpsertItemBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XUpsertItemBatchRequest) ProtoMessage() {}

func (x *XUpsertItemBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XUpsertItemBatchRequest.ProtoReflect.Descriptor instead.
func (*XUpsertItemBatchRequest) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{1}
}

func (x *XUpsertItemBatchRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *XUpsertItemBatchRequest) GetItems() []*XItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type XUpsertItemBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorIndices []uint32 `protobuf:"varint,1,rep,packed,name=error_indices,json=errorIndices,proto3" json:"error_indices,omitempty"`
}

func (x *XUpsertItemBatchResponse) Reset() {
	*x = XUpsertItemBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XUpsertItemBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XUpsertItemBatchResponse) ProtoMessage() {}

func (x *XUpsertItemBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XUpsertItemBatchResponse.ProtoReflect.Descriptor instead.
func (*XUpsertItemBatchResponse) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{2}
}

func (x *XUpsertItemBatchResponse) GetErrorIndices() []uint32 {
	if x != nil {
		return x.ErrorIndices
	}
	return nil
}

type XDeleteItemBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string             `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	Ids       []string           `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"` // TODO: reserve after migration
	Filter    *XFilterExpression `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *XDeleteItemBatchRequest) Reset() {
	*x = XDeleteItemBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XDeleteItemBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XDeleteItemBatchRequest) ProtoMessage() {}

func (x *XDeleteItemBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XDeleteItemBatchRequest.ProtoReflect.Descriptor instead.
func (*XDeleteItemBatchRequest) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{3}
}

func (x *XDeleteItemBatchRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *XDeleteItemBatchRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *XDeleteItemBatchRequest) GetFilter() *XFilterExpression {
	if x != nil {
		return x.Filter
	}
	return nil
}

type XDeleteItemBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *XDeleteItemBatchResponse) Reset() {
	*x = XDeleteItemBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XDeleteItemBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XDeleteItemBatchResponse) ProtoMessage() {}

func (x *XDeleteItemBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XDeleteItemBatchResponse.ProtoReflect.Descriptor instead.
func (*XDeleteItemBatchResponse) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{4}
}

type XVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []float32 `protobuf:"fixed32,1,rep,packed,name=elements,proto3" json:"elements,omitempty"`
}

func (x *XVector) Reset() {
	*x = XVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XVector) ProtoMessage() {}

func (x *XVector) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XVector.ProtoReflect.Descriptor instead.
func (*XVector) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{5}
}

func (x *XVector) GetElements() []float32 {
	if x != nil {
		return x.Elements
	}
	return nil
}

type XMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Types that are assignable to Value:
	//
	//	*XMetadata_StringValue
	//	*XMetadata_IntegerValue
	//	*XMetadata_DoubleValue
	//	*XMetadata_BooleanValue
	//	*XMetadata_ListOfStringsValue
	Value isXMetadata_Value `protobuf_oneof:"value"`
}

func (x *XMetadata) Reset() {
	*x = XMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XMetadata) ProtoMessage() {}

func (x *XMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XMetadata.ProtoReflect.Descriptor instead.
func (*XMetadata) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{6}
}

func (x *XMetadata) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (m *XMetadata) GetValue() isXMetadata_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *XMetadata) GetStringValue() string {
	if x, ok := x.GetValue().(*XMetadata_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *XMetadata) GetIntegerValue() int64 {
	if x, ok := x.GetValue().(*XMetadata_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (x *XMetadata) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*XMetadata_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *XMetadata) GetBooleanValue() bool {
	if x, ok := x.GetValue().(*XMetadata_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (x *XMetadata) GetListOfStringsValue() *XMetadata_XListOfStrings {
	if x, ok := x.GetValue().(*XMetadata_ListOfStringsValue); ok {
		return x.ListOfStringsValue
	}
	return nil
}

type isXMetadata_Value interface {
	isXMetadata_Value()
}

type XMetadata_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type XMetadata_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,3,opt,name=integer_value,json=integerValue,proto3,oneof"`
}

type XMetadata_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type XMetadata_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,5,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

type XMetadata_ListOfStringsValue struct {
	ListOfStringsValue *XMetadata_XListOfStrings `protobuf:"bytes,6,opt,name=list_of_strings_value,json=listOfStringsValue,proto3,oneof"`
}

func (*XMetadata_StringValue) isXMetadata_Value() {}

func (*XMetadata_IntegerValue) isXMetadata_Value() {}

func (*XMetadata_DoubleValue) isXMetadata_Value() {}

func (*XMetadata_BooleanValue) isXMetadata_Value() {}

func (*XMetadata_ListOfStringsValue) isXMetadata_Value() {}

type XMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*XMetadataRequest_Some_
	//	*XMetadataRequest_All_
	Kind isXMetadataRequest_Kind `protobuf_oneof:"kind"`
}

func (x *XMetadataRequest) Reset() {
	*x = XMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XMetadataRequest) ProtoMessage() {}

func (x *XMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XMetadataRequest.ProtoReflect.Descriptor instead.
func (*XMetadataRequest) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{7}
}

func (m *XMetadataRequest) GetKind() isXMetadataRequest_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *XMetadataRequest) GetSome() *XMetadataRequest_Some {
	if x, ok := x.GetKind().(*XMetadataRequest_Some_); ok {
		return x.Some
	}
	return nil
}

func (x *XMetadataRequest) GetAll() *XMetadataRequest_All {
	if x, ok := x.GetKind().(*XMetadataRequest_All_); ok {
		return x.All
	}
	return nil
}

type isXMetadataRequest_Kind interface {
	isXMetadataRequest_Kind()
}

type XMetadataRequest_Some_ struct {
	Some *XMetadataRequest_Some `protobuf:"bytes,2,opt,name=some,proto3,oneof"`
}

type XMetadataRequest_All_ struct {
	All *XMetadataRequest_All `protobuf:"bytes,3,opt,name=all,proto3,oneof"`
}

func (*XMetadataRequest_Some_) isXMetadataRequest_Kind() {}

func (*XMetadataRequest_All_) isXMetadataRequest_Kind() {}

type XAndExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstExpression  *XFilterExpression `protobuf:"bytes,1,opt,name=first_expression,json=firstExpression,proto3" json:"first_expression,omitempty"`
	SecondExpression *XFilterExpression `protobuf:"bytes,2,opt,name=second_expression,json=secondExpression,proto3" json:"second_expression,omitempty"`
}

func (x *XAndExpression) Reset() {
	*x = XAndExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XAndExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XAndExpression) ProtoMessage() {}

func (x *XAndExpression) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XAndExpression.ProtoReflect.Descriptor instead.
func (*XAndExpression) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{8}
}

func (x *XAndExpression) GetFirstExpression() *XFilterExpression {
	if x != nil {
		return x.FirstExpression
	}
	return nil
}

func (x *XAndExpression) GetSecondExpression() *XFilterExpression {
	if x != nil {
		return x.SecondExpression
	}
	return nil
}

type XOrExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstExpression  *XFilterExpression `protobuf:"bytes,1,opt,name=first_expression,json=firstExpression,proto3" json:"first_expression,omitempty"`
	SecondExpression *XFilterExpression `protobuf:"bytes,2,opt,name=second_expression,json=secondExpression,proto3" json:"second_expression,omitempty"`
}

func (x *XOrExpression) Reset() {
	*x = XOrExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XOrExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XOrExpression) ProtoMessage() {}

func (x *XOrExpression) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XOrExpression.ProtoReflect.Descriptor instead.
func (*XOrExpression) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{9}
}

func (x *XOrExpression) GetFirstExpression() *XFilterExpression {
	if x != nil {
		return x.FirstExpression
	}
	return nil
}

func (x *XOrExpression) GetSecondExpression() *XFilterExpression {
	if x != nil {
		return x.SecondExpression
	}
	return nil
}

type XNotExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpressionToNegate *XFilterExpression `protobuf:"bytes,1,opt,name=expression_to_negate,json=expressionToNegate,proto3" json:"expression_to_negate,omitempty"`
}

func (x *XNotExpression) Reset() {
	*x = XNotExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XNotExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNotExpression) ProtoMessage() {}

func (x *XNotExpression) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNotExpression.ProtoReflect.Descriptor instead.
func (*XNotExpression) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{10}
}

func (x *XNotExpression) GetExpressionToNegate() *XFilterExpression {
	if x != nil {
		return x.ExpressionToNegate
	}
	return nil
}

type XEqualsExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Types that are assignable to Value:
	//
	//	*XEqualsExpression_StringValue
	//	*XEqualsExpression_IntegerValue
	//	*XEqualsExpression_FloatValue
	//	*XEqualsExpression_BooleanValue
	Value isXEqualsExpression_Value `protobuf_oneof:"value"`
}

func (x *XEqualsExpression) Reset() {
	*x = XEqualsExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XEqualsExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XEqualsExpression) ProtoMessage() {}

func (x *XEqualsExpression) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XEqualsExpression.ProtoReflect.Descriptor instead.
func (*XEqualsExpression) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{11}
}

func (x *XEqualsExpression) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (m *XEqualsExpression) GetValue() isXEqualsExpression_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *XEqualsExpression) GetStringValue() string {
	if x, ok := x.GetValue().(*XEqualsExpression_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *XEqualsExpression) GetIntegerValue() int64 {
	if x, ok := x.GetValue().(*XEqualsExpression_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (x *XEqualsExpression) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*XEqualsExpression_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *XEqualsExpression) GetBooleanValue() bool {
	if x, ok := x.GetValue().(*XEqualsExpression_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

type isXEqualsExpression_Value interface {
	isXEqualsExpression_Value()
}

type XEqualsExpression_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type XEqualsExpression_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,3,opt,name=integer_value,json=integerValue,proto3,oneof"`
}

type XEqualsExpression_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,4,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type XEqualsExpression_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,5,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

func (*XEqualsExpression_StringValue) isXEqualsExpression_Value() {}

func (*XEqualsExpression_IntegerValue) isXEqualsExpression_Value() {}

func (*XEqualsExpression_FloatValue) isXEqualsExpression_Value() {}

func (*XEqualsExpression_BooleanValue) isXEqualsExpression_Value() {}

type XGreaterThanExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Types that are assignable to Value:
	//
	//	*XGreaterThanExpression_IntegerValue
	//	*XGreaterThanExpression_FloatValue
	Value isXGreaterThanExpression_Value `protobuf_oneof:"value"`
}

func (x *XGreaterThanExpression) Reset() {
	*x = XGreaterThanExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XGreaterThanExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XGreaterThanExpression) ProtoMessage() {}

func (x *XGreaterThanExpression) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XGreaterThanExpression.ProtoReflect.Descriptor instead.
func (*XGreaterThanExpression) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{12}
}

func (x *XGreaterThanExpression) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (m *XGreaterThanExpression) GetValue() isXGreaterThanExpression_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *XGreaterThanExpression) GetIntegerValue() int64 {
	if x, ok := x.GetValue().(*XGreaterThanExpression_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (x *XGreaterThanExpression) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*XGreaterThanExpression_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

type isXGreaterThanExpression_Value interface {
	isXGreaterThanExpression_Value()
}

type XGreaterThanExpression_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,2,opt,name=integer_value,json=integerValue,proto3,oneof"`
}

type XGreaterThanExpression_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,3,opt,name=float_value,json=floatValue,proto3,oneof"`
}

func (*XGreaterThanExpression_IntegerValue) isXGreaterThanExpression_Value() {}

func (*XGreaterThanExpression_FloatValue) isXGreaterThanExpression_Value() {}

type XGreaterThanOrEqualExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Types that are assignable to Value:
	//
	//	*XGreaterThanOrEqualExpression_IntegerValue
	//	*XGreaterThanOrEqualExpression_FloatValue
	Value isXGreaterThanOrEqualExpression_Value `protobuf_oneof:"value"`
}

func (x *XGreaterThanOrEqualExpression) Reset() {
	*x = XGreaterThanOrEqualExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XGreaterThanOrEqualExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XGreaterThanOrEqualExpression) ProtoMessage() {}

func (x *XGreaterThanOrEqualExpression) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XGreaterThanOrEqualExpression.ProtoReflect.Descriptor instead.
func (*XGreaterThanOrEqualExpression) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{13}
}

func (x *XGreaterThanOrEqualExpression) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (m *XGreaterThanOrEqualExpression) GetValue() isXGreaterThanOrEqualExpression_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *XGreaterThanOrEqualExpression) GetIntegerValue() int64 {
	if x, ok := x.GetValue().(*XGreaterThanOrEqualExpression_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (x *XGreaterThanOrEqualExpression) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*XGreaterThanOrEqualExpression_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

type isXGreaterThanOrEqualExpression_Value interface {
	isXGreaterThanOrEqualExpression_Value()
}

type XGreaterThanOrEqualExpression_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,2,opt,name=integer_value,json=integerValue,proto3,oneof"`
}

type XGreaterThanOrEqualExpression_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,3,opt,name=float_value,json=floatValue,proto3,oneof"`
}

func (*XGreaterThanOrEqualExpression_IntegerValue) isXGreaterThanOrEqualExpression_Value() {}

func (*XGreaterThanOrEqualExpression_FloatValue) isXGreaterThanOrEqualExpression_Value() {}

type XLessThanExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Types that are assignable to Value:
	//
	//	*XLessThanExpression_IntegerValue
	//	*XLessThanExpression_FloatValue
	Value isXLessThanExpression_Value `protobuf_oneof:"value"`
}

func (x *XLessThanExpression) Reset() {
	*x = XLessThanExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XLessThanExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XLessThanExpression) ProtoMessage() {}

func (x *XLessThanExpression) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XLessThanExpression.ProtoReflect.Descriptor instead.
func (*XLessThanExpression) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{14}
}

func (x *XLessThanExpression) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (m *XLessThanExpression) GetValue() isXLessThanExpression_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *XLessThanExpression) GetIntegerValue() int64 {
	if x, ok := x.GetValue().(*XLessThanExpression_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (x *XLessThanExpression) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*XLessThanExpression_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

type isXLessThanExpression_Value interface {
	isXLessThanExpression_Value()
}

type XLessThanExpression_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,2,opt,name=integer_value,json=integerValue,proto3,oneof"`
}

type XLessThanExpression_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,3,opt,name=float_value,json=floatValue,proto3,oneof"`
}

func (*XLessThanExpression_IntegerValue) isXLessThanExpression_Value() {}

func (*XLessThanExpression_FloatValue) isXLessThanExpression_Value() {}

type XLessThanOrEqualExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Types that are assignable to Value:
	//
	//	*XLessThanOrEqualExpression_IntegerValue
	//	*XLessThanOrEqualExpression_FloatValue
	Value isXLessThanOrEqualExpression_Value `protobuf_oneof:"value"`
}

func (x *XLessThanOrEqualExpression) Reset() {
	*x = XLessThanOrEqualExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XLessThanOrEqualExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XLessThanOrEqualExpression) ProtoMessage() {}

func (x *XLessThanOrEqualExpression) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XLessThanOrEqualExpression.ProtoReflect.Descriptor instead.
func (*XLessThanOrEqualExpression) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{15}
}

func (x *XLessThanOrEqualExpression) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (m *XLessThanOrEqualExpression) GetValue() isXLessThanOrEqualExpression_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *XLessThanOrEqualExpression) GetIntegerValue() int64 {
	if x, ok := x.GetValue().(*XLessThanOrEqualExpression_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (x *XLessThanOrEqualExpression) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*XLessThanOrEqualExpression_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

type isXLessThanOrEqualExpression_Value interface {
	isXLessThanOrEqualExpression_Value()
}

type XLessThanOrEqualExpression_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,2,opt,name=integer_value,json=integerValue,proto3,oneof"`
}

type XLessThanOrEqualExpression_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,3,opt,name=float_value,json=floatValue,proto3,oneof"`
}

func (*XLessThanOrEqualExpression_IntegerValue) isXLessThanOrEqualExpression_Value() {}

func (*XLessThanOrEqualExpression_FloatValue) isXLessThanOrEqualExpression_Value() {}

type XListContainsExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Types that are assignable to Value:
	//
	//	*XListContainsExpression_StringValue
	Value isXListContainsExpression_Value `protobuf_oneof:"value"`
}

func (x *XListContainsExpression) Reset() {
	*x = XListContainsExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XListContainsExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XListContainsExpression) ProtoMessage() {}

func (x *XListContainsExpression) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XListContainsExpression.ProtoReflect.Descriptor instead.
func (*XListContainsExpression) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{16}
}

func (x *XListContainsExpression) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (m *XListContainsExpression) GetValue() isXListContainsExpression_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *XListContainsExpression) GetStringValue() string {
	if x, ok := x.GetValue().(*XListContainsExpression_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isXListContainsExpression_Value interface {
	isXListContainsExpression_Value()
}

type XListContainsExpression_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*XListContainsExpression_StringValue) isXListContainsExpression_Value() {}

type XIdInSetExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *XIdInSetExpression) Reset() {
	*x = XIdInSetExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XIdInSetExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XIdInSetExpression) ProtoMessage() {}

func (x *XIdInSetExpression) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XIdInSetExpression.ProtoReflect.Descriptor instead.
func (*XIdInSetExpression) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{17}
}

func (x *XIdInSetExpression) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type XFilterExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expression:
	//
	//	*XFilterExpression_EqualsExpression
	//	*XFilterExpression_AndExpression
	//	*XFilterExpression_OrExpression
	//	*XFilterExpression_NotExpression
	//	*XFilterExpression_GreaterThanExpression
	//	*XFilterExpression_GreaterThanOrEqualExpression
	//	*XFilterExpression_LessThanExpression
	//	*XFilterExpression_LessThanOrEqualExpression
	//	*XFilterExpression_ListContainsExpression
	//	*XFilterExpression_IdInSetExpression
	Expression isXFilterExpression_Expression `protobuf_oneof:"expression"`
}

func (x *XFilterExpression) Reset() {
	*x = XFilterExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XFilterExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XFilterExpression) ProtoMessage() {}

func (x *XFilterExpression) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XFilterExpression.ProtoReflect.Descriptor instead.
func (*XFilterExpression) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{18}
}

func (m *XFilterExpression) GetExpression() isXFilterExpression_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (x *XFilterExpression) GetEqualsExpression() *XEqualsExpression {
	if x, ok := x.GetExpression().(*XFilterExpression_EqualsExpression); ok {
		return x.EqualsExpression
	}
	return nil
}

func (x *XFilterExpression) GetAndExpression() *XAndExpression {
	if x, ok := x.GetExpression().(*XFilterExpression_AndExpression); ok {
		return x.AndExpression
	}
	return nil
}

func (x *XFilterExpression) GetOrExpression() *XOrExpression {
	if x, ok := x.GetExpression().(*XFilterExpression_OrExpression); ok {
		return x.OrExpression
	}
	return nil
}

func (x *XFilterExpression) GetNotExpression() *XNotExpression {
	if x, ok := x.GetExpression().(*XFilterExpression_NotExpression); ok {
		return x.NotExpression
	}
	return nil
}

func (x *XFilterExpression) GetGreaterThanExpression() *XGreaterThanExpression {
	if x, ok := x.GetExpression().(*XFilterExpression_GreaterThanExpression); ok {
		return x.GreaterThanExpression
	}
	return nil
}

func (x *XFilterExpression) GetGreaterThanOrEqualExpression() *XGreaterThanOrEqualExpression {
	if x, ok := x.GetExpression().(*XFilterExpression_GreaterThanOrEqualExpression); ok {
		return x.GreaterThanOrEqualExpression
	}
	return nil
}

func (x *XFilterExpression) GetLessThanExpression() *XLessThanExpression {
	if x, ok := x.GetExpression().(*XFilterExpression_LessThanExpression); ok {
		return x.LessThanExpression
	}
	return nil
}

func (x *XFilterExpression) GetLessThanOrEqualExpression() *XLessThanOrEqualExpression {
	if x, ok := x.GetExpression().(*XFilterExpression_LessThanOrEqualExpression); ok {
		return x.LessThanOrEqualExpression
	}
	return nil
}

func (x *XFilterExpression) GetListContainsExpression() *XListContainsExpression {
	if x, ok := x.GetExpression().(*XFilterExpression_ListContainsExpression); ok {
		return x.ListContainsExpression
	}
	return nil
}

func (x *XFilterExpression) GetIdInSetExpression() *XIdInSetExpression {
	if x, ok := x.GetExpression().(*XFilterExpression_IdInSetExpression); ok {
		return x.IdInSetExpression
	}
	return nil
}

type isXFilterExpression_Expression interface {
	isXFilterExpression_Expression()
}

type XFilterExpression_EqualsExpression struct {
	EqualsExpression *XEqualsExpression `protobuf:"bytes,1,opt,name=equals_expression,json=equalsExpression,proto3,oneof"`
}

type XFilterExpression_AndExpression struct {
	AndExpression *XAndExpression `protobuf:"bytes,2,opt,name=and_expression,json=andExpression,proto3,oneof"`
}

type XFilterExpression_OrExpression struct {
	OrExpression *XOrExpression `protobuf:"bytes,3,opt,name=or_expression,json=orExpression,proto3,oneof"`
}

type XFilterExpression_NotExpression struct {
	NotExpression *XNotExpression `protobuf:"bytes,4,opt,name=not_expression,json=notExpression,proto3,oneof"`
}

type XFilterExpression_GreaterThanExpression struct {
	GreaterThanExpression *XGreaterThanExpression `protobuf:"bytes,5,opt,name=greater_than_expression,json=greaterThanExpression,proto3,oneof"`
}

type XFilterExpression_GreaterThanOrEqualExpression struct {
	GreaterThanOrEqualExpression *XGreaterThanOrEqualExpression `protobuf:"bytes,6,opt,name=greater_than_or_equal_expression,json=greaterThanOrEqualExpression,proto3,oneof"`
}

type XFilterExpression_LessThanExpression struct {
	LessThanExpression *XLessThanExpression `protobuf:"bytes,7,opt,name=less_than_expression,json=lessThanExpression,proto3,oneof"`
}

type XFilterExpression_LessThanOrEqualExpression struct {
	LessThanOrEqualExpression *XLessThanOrEqualExpression `protobuf:"bytes,8,opt,name=less_than_or_equal_expression,json=lessThanOrEqualExpression,proto3,oneof"`
}

type XFilterExpression_ListContainsExpression struct {
	ListContainsExpression *XListContainsExpression `protobuf:"bytes,9,opt,name=list_contains_expression,json=listContainsExpression,proto3,oneof"`
}

type XFilterExpression_IdInSetExpression struct {
	IdInSetExpression *XIdInSetExpression `protobuf:"bytes,10,opt,name=id_in_set_expression,json=idInSetExpression,proto3,oneof"`
}

func (*XFilterExpression_EqualsExpression) isXFilterExpression_Expression() {}

func (*XFilterExpression_AndExpression) isXFilterExpression_Expression() {}

func (*XFilterExpression_OrExpression) isXFilterExpression_Expression() {}

func (*XFilterExpression_NotExpression) isXFilterExpression_Expression() {}

func (*XFilterExpression_GreaterThanExpression) isXFilterExpression_Expression() {}

func (*XFilterExpression_GreaterThanOrEqualExpression) isXFilterExpression_Expression() {}

func (*XFilterExpression_LessThanExpression) isXFilterExpression_Expression() {}

func (*XFilterExpression_LessThanOrEqualExpression) isXFilterExpression_Expression() {}

func (*XFilterExpression_ListContainsExpression) isXFilterExpression_Expression() {}

func (*XFilterExpression_IdInSetExpression) isXFilterExpression_Expression() {}

type XNoScoreThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *XNoScoreThreshold) Reset() {
	*x = XNoScoreThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XNoScoreThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNoScoreThreshold) ProtoMessage() {}

func (x *XNoScoreThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNoScoreThreshold.ProtoReflect.Descriptor instead.
func (*XNoScoreThreshold) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{19}
}

type XSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName      string            `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	TopK           uint32            `protobuf:"varint,2,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	QueryVector    *XVector          `protobuf:"bytes,3,opt,name=query_vector,json=queryVector,proto3" json:"query_vector,omitempty"`
	MetadataFields *XMetadataRequest `protobuf:"bytes,4,opt,name=metadata_fields,json=metadataFields,proto3" json:"metadata_fields,omitempty"`
	// Types that are assignable to Threshold:
	//
	//	*XSearchRequest_ScoreThreshold
	//	*XSearchRequest_NoScoreThreshold
	Threshold isXSearchRequest_Threshold `protobuf_oneof:"threshold"`
	Filter    *XFilterExpression         `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *XSearchRequest) Reset() {
	*x = XSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XSearchRequest) ProtoMessage() {}

func (x *XSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XSearchRequest.ProtoReflect.Descriptor instead.
func (*XSearchRequest) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{20}
}

func (x *XSearchRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *XSearchRequest) GetTopK() uint32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *XSearchRequest) GetQueryVector() *XVector {
	if x != nil {
		return x.QueryVector
	}
	return nil
}

func (x *XSearchRequest) GetMetadataFields() *XMetadataRequest {
	if x != nil {
		return x.MetadataFields
	}
	return nil
}

func (m *XSearchRequest) GetThreshold() isXSearchRequest_Threshold {
	if m != nil {
		return m.Threshold
	}
	return nil
}

func (x *XSearchRequest) GetScoreThreshold() float32 {
	if x, ok := x.GetThreshold().(*XSearchRequest_ScoreThreshold); ok {
		return x.ScoreThreshold
	}
	return 0
}

func (x *XSearchRequest) GetNoScoreThreshold() *XNoScoreThreshold {
	if x, ok := x.GetThreshold().(*XSearchRequest_NoScoreThreshold); ok {
		return x.NoScoreThreshold
	}
	return nil
}

func (x *XSearchRequest) GetFilter() *XFilterExpression {
	if x != nil {
		return x.Filter
	}
	return nil
}

type isXSearchRequest_Threshold interface {
	isXSearchRequest_Threshold()
}

type XSearchRequest_ScoreThreshold struct {
	ScoreThreshold float32 `protobuf:"fixed32,5,opt,name=score_threshold,json=scoreThreshold,proto3,oneof"`
}

type XSearchRequest_NoScoreThreshold struct {
	NoScoreThreshold *XNoScoreThreshold `protobuf:"bytes,6,opt,name=no_score_threshold,json=noScoreThreshold,proto3,oneof"`
}

func (*XSearchRequest_ScoreThreshold) isXSearchRequest_Threshold() {}

func (*XSearchRequest_NoScoreThreshold) isXSearchRequest_Threshold() {}

type XSearchAndFetchVectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName      string            `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	TopK           uint32            `protobuf:"varint,2,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	QueryVector    *XVector          `protobuf:"bytes,3,opt,name=query_vector,json=queryVector,proto3" json:"query_vector,omitempty"`
	MetadataFields *XMetadataRequest `protobuf:"bytes,4,opt,name=metadata_fields,json=metadataFields,proto3" json:"metadata_fields,omitempty"`
	// Types that are assignable to Threshold:
	//
	//	*XSearchAndFetchVectorsRequest_ScoreThreshold
	//	*XSearchAndFetchVectorsRequest_NoScoreThreshold
	Threshold isXSearchAndFetchVectorsRequest_Threshold `protobuf_oneof:"threshold"`
	Filter    *XFilterExpression                        `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *XSearchAndFetchVectorsRequest) Reset() {
	*x = XSearchAndFetchVectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XSearchAndFetchVectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XSearchAndFetchVectorsRequest) ProtoMessage() {}

func (x *XSearchAndFetchVectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XSearchAndFetchVectorsRequest.ProtoReflect.Descriptor instead.
func (*XSearchAndFetchVectorsRequest) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{21}
}

func (x *XSearchAndFetchVectorsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *XSearchAndFetchVectorsRequest) GetTopK() uint32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *XSearchAndFetchVectorsRequest) GetQueryVector() *XVector {
	if x != nil {
		return x.QueryVector
	}
	return nil
}

func (x *XSearchAndFetchVectorsRequest) GetMetadataFields() *XMetadataRequest {
	if x != nil {
		return x.MetadataFields
	}
	return nil
}

func (m *XSearchAndFetchVectorsRequest) GetThreshold() isXSearchAndFetchVectorsRequest_Threshold {
	if m != nil {
		return m.Threshold
	}
	return nil
}

func (x *XSearchAndFetchVectorsRequest) GetScoreThreshold() float32 {
	if x, ok := x.GetThreshold().(*XSearchAndFetchVectorsRequest_ScoreThreshold); ok {
		return x.ScoreThreshold
	}
	return 0
}

func (x *XSearchAndFetchVectorsRequest) GetNoScoreThreshold() *XNoScoreThreshold {
	if x, ok := x.GetThreshold().(*XSearchAndFetchVectorsRequest_NoScoreThreshold); ok {
		return x.NoScoreThreshold
	}
	return nil
}

func (x *XSearchAndFetchVectorsRequest) GetFilter() *XFilterExpression {
	if x != nil {
		return x.Filter
	}
	return nil
}

type isXSearchAndFetchVectorsRequest_Threshold interface {
	isXSearchAndFetchVectorsRequest_Threshold()
}

type XSearchAndFetchVectorsRequest_ScoreThreshold struct {
	ScoreThreshold float32 `protobuf:"fixed32,5,opt,name=score_threshold,json=scoreThreshold,proto3,oneof"`
}

type XSearchAndFetchVectorsRequest_NoScoreThreshold struct {
	NoScoreThreshold *XNoScoreThreshold `protobuf:"bytes,6,opt,name=no_score_threshold,json=noScoreThreshold,proto3,oneof"`
}

func (*XSearchAndFetchVectorsRequest_ScoreThreshold) isXSearchAndFetchVectorsRequest_Threshold() {}

func (*XSearchAndFetchVectorsRequest_NoScoreThreshold) isXSearchAndFetchVectorsRequest_Threshold() {}

type XSearchHit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Score    float32      `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	Metadata []*XMetadata `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *XSearchHit) Reset() {
	*x = XSearchHit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XSearchHit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XSearchHit) ProtoMessage() {}

func (x *XSearchHit) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XSearchHit.ProtoReflect.Descriptor instead.
func (*XSearchHit) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{22}
}

func (x *XSearchHit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *XSearchHit) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *XSearchHit) GetMetadata() []*XMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type XSearchAndFetchVectorsHit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Score    float32      `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	Metadata []*XMetadata `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty"`
	Vector   *XVector     `protobuf:"bytes,4,opt,name=vector,proto3" json:"vector,omitempty"`
}

func (x *XSearchAndFetchVectorsHit) Reset() {
	*x = XSearchAndFetchVectorsHit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XSearchAndFetchVectorsHit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XSearchAndFetchVectorsHit) ProtoMessage() {}

func (x *XSearchAndFetchVectorsHit) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XSearchAndFetchVectorsHit.ProtoReflect.Descriptor instead.
func (*XSearchAndFetchVectorsHit) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{23}
}

func (x *XSearchAndFetchVectorsHit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *XSearchAndFetchVectorsHit) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *XSearchAndFetchVectorsHit) GetMetadata() []*XMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *XSearchAndFetchVectorsHit) GetVector() *XVector {
	if x != nil {
		return x.Vector
	}
	return nil
}

type XSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hits []*XSearchHit `protobuf:"bytes,1,rep,name=hits,proto3" json:"hits,omitempty"`
}

func (x *XSearchResponse) Reset() {
	*x = XSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XSearchResponse) ProtoMessage() {}

func (x *XSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XSearchResponse.ProtoReflect.Descriptor instead.
func (*XSearchResponse) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{24}
}

func (x *XSearchResponse) GetHits() []*XSearchHit {
	if x != nil {
		return x.Hits
	}
	return nil
}

type XSearchAndFetchVectorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hits []*XSearchAndFetchVectorsHit `protobuf:"bytes,1,rep,name=hits,proto3" json:"hits,omitempty"`
}

func (x *XSearchAndFetchVectorsResponse) Reset() {
	*x = XSearchAndFetchVectorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XSearchAndFetchVectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XSearchAndFetchVectorsResponse) ProtoMessage() {}

func (x *XSearchAndFetchVectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XSearchAndFetchVectorsResponse.ProtoReflect.Descriptor instead.
func (*XSearchAndFetchVectorsResponse) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{25}
}

func (x *XSearchAndFetchVectorsResponse) GetHits() []*XSearchAndFetchVectorsHit {
	if x != nil {
		return x.Hits
	}
	return nil
}

type XGetItemMetadataBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName      string             `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	Ids            []string           `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"` // TODO: reserve after migration
	MetadataFields *XMetadataRequest  `protobuf:"bytes,3,opt,name=metadata_fields,json=metadataFields,proto3" json:"metadata_fields,omitempty"`
	Filter         *XFilterExpression `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *XGetItemMetadataBatchRequest) Reset() {
	*x = XGetItemMetadataBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XGetItemMetadataBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XGetItemMetadataBatchRequest) ProtoMessage() {}

func (x *XGetItemMetadataBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XGetItemMetadataBatchRequest.ProtoReflect.Descriptor instead.
func (*XGetItemMetadataBatchRequest) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{26}
}

func (x *XGetItemMetadataBatchRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *XGetItemMetadataBatchRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *XGetItemMetadataBatchRequest) GetMetadataFields() *XMetadataRequest {
	if x != nil {
		return x.MetadataFields
	}
	return nil
}

func (x *XGetItemMetadataBatchRequest) GetFilter() *XFilterExpression {
	if x != nil {
		return x.Filter
	}
	return nil
}

type XItemMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*XItemMetadataResponse_Miss
	//	*XItemMetadataResponse_Hit
	Response isXItemMetadataResponse_Response `protobuf_oneof:"response"`
	Id       string                           `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Metadata []*XMetadata                     `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *XItemMetadataResponse) Reset() {
	*x = XItemMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XItemMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XItemMetadataResponse) ProtoMessage() {}

func (x *XItemMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XItemMetadataResponse.ProtoReflect.Descriptor instead.
func (*XItemMetadataResponse) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{27}
}

func (m *XItemMetadataResponse) GetResponse() isXItemMetadataResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *XItemMetadataResponse) GetMiss() *XItemMetadataResponse_XMiss {
	if x, ok := x.GetResponse().(*XItemMetadataResponse_Miss); ok {
		return x.Miss
	}
	return nil
}

func (x *XItemMetadataResponse) GetHit() *XItemMetadataResponse_XHit {
	if x, ok := x.GetResponse().(*XItemMetadataResponse_Hit); ok {
		return x.Hit
	}
	return nil
}

func (x *XItemMetadataResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *XItemMetadataResponse) GetMetadata() []*XMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type isXItemMetadataResponse_Response interface {
	isXItemMetadataResponse_Response()
}

type XItemMetadataResponse_Miss struct {
	Miss *XItemMetadataResponse_XMiss `protobuf:"bytes,1,opt,name=miss,proto3,oneof"` // TODO: reserve after migration
}

type XItemMetadataResponse_Hit struct {
	Hit *XItemMetadataResponse_XHit `protobuf:"bytes,2,opt,name=hit,proto3,oneof"` // TODO: reserve after migration
}

func (*XItemMetadataResponse_Miss) isXItemMetadataResponse_Response() {}

func (*XItemMetadataResponse_Hit) isXItemMetadataResponse_Response() {}

type XGetItemMetadataBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemMetadataResponse []*XItemMetadataResponse `protobuf:"bytes,1,rep,name=item_metadata_response,json=itemMetadataResponse,proto3" json:"item_metadata_response,omitempty"`
}

func (x *XGetItemMetadataBatchResponse) Reset() {
	*x = XGetItemMetadataBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XGetItemMetadataBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XGetItemMetadataBatchResponse) ProtoMessage() {}

func (x *XGetItemMetadataBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XGetItemMetadataBatchResponse.ProtoReflect.Descriptor instead.
func (*XGetItemMetadataBatchResponse) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{28}
}

func (x *XGetItemMetadataBatchResponse) GetItemMetadataResponse() []*XItemMetadataResponse {
	if x != nil {
		return x.ItemMetadataResponse
	}
	return nil
}

type XGetItemBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName      string             `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	Ids            []string           `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	MetadataFields *XMetadataRequest  `protobuf:"bytes,3,opt,name=metadata_fields,json=metadataFields,proto3" json:"metadata_fields,omitempty"`
	Filter         *XFilterExpression `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *XGetItemBatchRequest) Reset() {
	*x = XGetItemBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XGetItemBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XGetItemBatchRequest) ProtoMessage() {}

func (x *XGetItemBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XGetItemBatchRequest.ProtoReflect.Descriptor instead.
func (*XGetItemBatchRequest) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{29}
}

func (x *XGetItemBatchRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *XGetItemBatchRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *XGetItemBatchRequest) GetMetadataFields() *XMetadataRequest {
	if x != nil {
		return x.MetadataFields
	}
	return nil
}

func (x *XGetItemBatchRequest) GetFilter() *XFilterExpression {
	if x != nil {
		return x.Filter
	}
	return nil
}

type XItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*XItemResponse_Miss
	//	*XItemResponse_Hit
	Response isXItemResponse_Response `protobuf_oneof:"response"`
	Id       string                   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Vector   *XVector                 `protobuf:"bytes,4,opt,name=vector,proto3" json:"vector,omitempty"`
	Metadata []*XMetadata             `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *XItemResponse) Reset() {
	*x = XItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XItemResponse) ProtoMessage() {}

func (x *XItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XItemResponse.ProtoReflect.Descriptor instead.
func (*XItemResponse) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{30}
}

func (m *XItemResponse) GetResponse() isXItemResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *XItemResponse) GetMiss() *XItemResponse_XMiss {
	if x, ok := x.GetResponse().(*XItemResponse_Miss); ok {
		return x.Miss
	}
	return nil
}

func (x *XItemResponse) GetHit() *XItemResponse_XHit {
	if x, ok := x.GetResponse().(*XItemResponse_Hit); ok {
		return x.Hit
	}
	return nil
}

func (x *XItemResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *XItemResponse) GetVector() *XVector {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *XItemResponse) GetMetadata() []*XMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type isXItemResponse_Response interface {
	isXItemResponse_Response()
}

type XItemResponse_Miss struct {
	Miss *XItemResponse_XMiss `protobuf:"bytes,1,opt,name=miss,proto3,oneof"` // TODO: reserve after migration
}

type XItemResponse_Hit struct {
	Hit *XItemResponse_XHit `protobuf:"bytes,2,opt,name=hit,proto3,oneof"` // TODO: reserve after migration
}

func (*XItemResponse_Miss) isXItemResponse_Response() {}

func (*XItemResponse_Hit) isXItemResponse_Response() {}

type XGetItemBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemResponse []*XItemResponse `protobuf:"bytes,1,rep,name=item_response,json=itemResponse,proto3" json:"item_response,omitempty"`
}

func (x *XGetItemBatchResponse) Reset() {
	*x = XGetItemBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XGetItemBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XGetItemBatchResponse) ProtoMessage() {}

func (x *XGetItemBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XGetItemBatchResponse.ProtoReflect.Descriptor instead.
func (*XGetItemBatchResponse) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{31}
}

func (x *XGetItemBatchResponse) GetItemResponse() []*XItemResponse {
	if x != nil {
		return x.ItemResponse
	}
	return nil
}

type XCountItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	// Types that are assignable to Filter:
	//
	//	*XCountItemsRequest_All_
	Filter isXCountItemsRequest_Filter `protobuf_oneof:"filter"`
}

func (x *XCountItemsRequest) Reset() {
	*x = XCountItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XCountItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XCountItemsRequest) ProtoMessage() {}

func (x *XCountItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XCountItemsRequest.ProtoReflect.Descriptor instead.
func (*XCountItemsRequest) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{32}
}

func (x *XCountItemsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (m *XCountItemsRequest) GetFilter() isXCountItemsRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *XCountItemsRequest) GetAll() *XCountItemsRequest_All {
	if x, ok := x.GetFilter().(*XCountItemsRequest_All_); ok {
		return x.All
	}
	return nil
}

type isXCountItemsRequest_Filter interface {
	isXCountItemsRequest_Filter()
}

type XCountItemsRequest_All_ struct {
	All *XCountItemsRequest_All `protobuf:"bytes,2,opt,name=all,proto3,oneof"`
}

func (*XCountItemsRequest_All_) isXCountItemsRequest_Filter() {}

type XCountItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemCount uint64 `protobuf:"varint,1,opt,name=item_count,json=itemCount,proto3" json:"item_count,omitempty"`
}

func (x *XCountItemsResponse) Reset() {
	*x = XCountItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XCountItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XCountItemsResponse) ProtoMessage() {}

func (x *XCountItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XCountItemsResponse.ProtoReflect.Descriptor instead.
func (*XCountItemsResponse) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{33}
}

func (x *XCountItemsResponse) GetItemCount() uint64 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

type XMetadata_XListOfStrings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *XMetadata_XListOfStrings) Reset() {
	*x = XMetadata_XListOfStrings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XMetadata_XListOfStrings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XMetadata_XListOfStrings) ProtoMessage() {}

func (x *XMetadata_XListOfStrings) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XMetadata_XListOfStrings.ProtoReflect.Descriptor instead.
func (*XMetadata_XListOfStrings) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{6, 0}
}

func (x *XMetadata_XListOfStrings) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type XMetadataRequest_Some struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *XMetadataRequest_Some) Reset() {
	*x = XMetadataRequest_Some{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XMetadataRequest_Some) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XMetadataRequest_Some) ProtoMessage() {}

func (x *XMetadataRequest_Some) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XMetadataRequest_Some.ProtoReflect.Descriptor instead.
func (*XMetadataRequest_Some) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{7, 0}
}

func (x *XMetadataRequest_Some) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type XMetadataRequest_All struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *XMetadataRequest_All) Reset() {
	*x = XMetadataRequest_All{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XMetadataRequest_All) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XMetadataRequest_All) ProtoMessage() {}

func (x *XMetadataRequest_All) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XMetadataRequest_All.ProtoReflect.Descriptor instead.
func (*XMetadataRequest_All) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{7, 1}
}

type XItemMetadataResponse_XMiss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *XItemMetadataResponse_XMiss) Reset() {
	*x = XItemMetadataResponse_XMiss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XItemMetadataResponse_XMiss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XItemMetadataResponse_XMiss) ProtoMessage() {}

func (x *XItemMetadataResponse_XMiss) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XItemMetadataResponse_XMiss.ProtoReflect.Descriptor instead.
func (*XItemMetadataResponse_XMiss) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{27, 0}
}

type XItemMetadataResponse_XHit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata []*XMetadata `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *XItemMetadataResponse_XHit) Reset() {
	*x = XItemMetadataResponse_XHit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XItemMetadataResponse_XHit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XItemMetadataResponse_XHit) ProtoMessage() {}

func (x *XItemMetadataResponse_XHit) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XItemMetadataResponse_XHit.ProtoReflect.Descriptor instead.
func (*XItemMetadataResponse_XHit) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{27, 1}
}

func (x *XItemMetadataResponse_XHit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *XItemMetadataResponse_XHit) GetMetadata() []*XMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type XItemResponse_XMiss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *XItemResponse_XMiss) Reset() {
	*x = XItemResponse_XMiss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XItemResponse_XMiss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XItemResponse_XMiss) ProtoMessage() {}

func (x *XItemResponse_XMiss) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XItemResponse_XMiss.ProtoReflect.Descriptor instead.
func (*XItemResponse_XMiss) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{30, 0}
}

type XItemResponse_XHit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Vector   *XVector     `protobuf:"bytes,2,opt,name=vector,proto3" json:"vector,omitempty"`
	Metadata []*XMetadata `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *XItemResponse_XHit) Reset() {
	*x = XItemResponse_XHit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XItemResponse_XHit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XItemResponse_XHit) ProtoMessage() {}

func (x *XItemResponse_XHit) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XItemResponse_XHit.ProtoReflect.Descriptor instead.
func (*XItemResponse_XHit) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{30, 1}
}

func (x *XItemResponse_XHit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *XItemResponse_XHit) GetVector() *XVector {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *XItemResponse_XHit) GetMetadata() []*XMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type XCountItemsRequest_All struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *XCountItemsRequest_All) Reset() {
	*x = XCountItemsRequest_All{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vectorindex_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XCountItemsRequest_All) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XCountItemsRequest_All) ProtoMessage() {}

func (x *XCountItemsRequest_All) ProtoReflect() protoreflect.Message {
	mi := &file_vectorindex_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XCountItemsRequest_All.ProtoReflect.Descriptor instead.
func (*XCountItemsRequest_All) Descriptor() ([]byte, []int) {
	return file_vectorindex_proto_rawDescGZIP(), []int{32, 0}
}

var File_vectorindex_proto protoreflect.FileDescriptor

var file_vectorindex_proto_rawDesc = []byte{
	0x0a, 0x11, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x79, 0x0a, 0x05, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x17, 0x5f,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x3f, 0x0a, 0x18, 0x5f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x82, 0x01, 0x0a, 0x17, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x36, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x1a, 0x0a, 0x18, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x0a, 0x07, 0x5f, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x09, 0x5f, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x25, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a,
	0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x5a, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x5f, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x69,
	0x73, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x28, 0x0a, 0x0e, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x10, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x6f, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x1a, 0x1e, 0x0a, 0x04, 0x53, 0x6f, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x05, 0x0a, 0x03, 0x41, 0x6c, 0x6c,
	0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x0e, 0x5f, 0x41, 0x6e,
	0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x10, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x5f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x5f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x0d, 0x5f, 0x4f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a,
	0x0e, 0x5f, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x50, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x4e, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x22, 0xc8, 0x01, 0x0a, 0x11, 0x5f, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x01, 0x0a,
	0x16, 0x5f, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x88, 0x01, 0x0a, 0x1d, 0x5f, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61,
	0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7e, 0x0a, 0x13, 0x5f,
	0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1a,
	0x5f, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x25, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x17, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x26, 0x0a, 0x12, 0x5f, 0x49, 0x64, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x8d, 0x07, 0x0a, 0x11, 0x5f,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x11, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x45, 0x71, 0x75, 0x61, 0x6c,
	0x73, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x0e, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4f, 0x72, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f,
	0x4e, 0x6f, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0d, 0x6e, 0x6f, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5d,
	0x0a, 0x17, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x47,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54,
	0x68, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a,
	0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x6f, 0x72,
	0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68,
	0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1c, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68,
	0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x14, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x5f, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x1d, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f,
	0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x6c, 0x65, 0x73,
	0x73, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x18, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x14, 0x69, 0x64, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x49, 0x64, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x69, 0x64, 0x49, 0x6e, 0x53,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x5f, 0x4e,
	0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22,
	0x85, 0x03, 0x0a, 0x0e, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x37, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x46, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x4e, 0x0a, 0x12, 0x6e, 0x6f, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4e, 0x6f,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x48, 0x00,
	0x52, 0x10, 0x6e, 0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x5f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x94, 0x03, 0x0a, 0x1d, 0x5f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x74, 0x63, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x37, 0x0a,
	0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x5f, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x29,
	0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4e, 0x0a, 0x12, 0x6e, 0x6f, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4e, 0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x0b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x66,
	0x0a, 0x0a, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x5f, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x74, 0x63, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x48, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c,
	0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x3e, 0x0a, 0x0f,
	0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x48, 0x69, 0x74, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x1e,
	0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x74, 0x63, 0x68, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x74, 0x63, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x48, 0x69, 0x74, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x1c, 0x5f,
	0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x0f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x5f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xb9, 0x02, 0x0a,
	0x15, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x6d, 0x69, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x5f, 0x4d, 0x69, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x04, 0x6d, 0x69, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x03, 0x68, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x5f, 0x48, 0x69, 0x74, 0x48, 0x00, 0x52, 0x03,
	0x68, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x07, 0x0a, 0x05, 0x5f, 0x4d, 0x69, 0x73, 0x73,
	0x1a, 0x4a, 0x0a, 0x04, 0x5f, 0x48, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x1d, 0x5f, 0x47, 0x65, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14, 0x69,
	0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x14, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x46, 0x0a,
	0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x5f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xfd, 0x02,
	0x0a, 0x0d, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x6d, 0x69, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x5f, 0x4d, 0x69, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x04, 0x6d, 0x69, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x68, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x5f, 0x48, 0x69, 0x74, 0x48, 0x00, 0x52, 0x03, 0x68, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x07,
	0x0a, 0x05, 0x5f, 0x4d, 0x69, 0x73, 0x73, 0x1a, 0x78, 0x0a, 0x04, 0x5f, 0x48, 0x69, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a,
	0x15, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x12, 0x5f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x03,
	0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x6c, 0x6c, 0x1a, 0x05, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x13, 0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xa9, 0x05, 0x0a,
	0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x60, 0x0a, 0x0f,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x24, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x5f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x24, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x45, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x74, 0x63, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x2a, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x74, 0x63, 0x68, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x74, 0x63, 0x68, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x29, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x47, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x47, 0x65, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x5f, 0x47,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x1f, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x63, 0x0a, 0x10, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x01, 0x5a, 0x30,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x6f, 0x68, 0x71, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2d,
	0x67, 0x6f, 0x3b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x67, 0x6f,
	0xaa, 0x02, 0x1a, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vectorindex_proto_rawDescOnce sync.Once
	file_vectorindex_proto_rawDescData = file_vectorindex_proto_rawDesc
)

func file_vectorindex_proto_rawDescGZIP() []byte {
	file_vectorindex_proto_rawDescOnce.Do(func() {
		file_vectorindex_proto_rawDescData = protoimpl.X.CompressGZIP(file_vectorindex_proto_rawDescData)
	})
	return file_vectorindex_proto_rawDescData
}

var file_vectorindex_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_vectorindex_proto_goTypes = []any{
	(*XItem)(nil),                          // 0: vectorindex._Item
	(*XUpsertItemBatchRequest)(nil),        // 1: vectorindex._UpsertItemBatchRequest
	(*XUpsertItemBatchResponse)(nil),       // 2: vectorindex._UpsertItemBatchResponse
	(*XDeleteItemBatchRequest)(nil),        // 3: vectorindex._DeleteItemBatchRequest
	(*XDeleteItemBatchResponse)(nil),       // 4: vectorindex._DeleteItemBatchResponse
	(*XVector)(nil),                        // 5: vectorindex._Vector
	(*XMetadata)(nil),                      // 6: vectorindex._Metadata
	(*XMetadataRequest)(nil),               // 7: vectorindex._MetadataRequest
	(*XAndExpression)(nil),                 // 8: vectorindex._AndExpression
	(*XOrExpression)(nil),                  // 9: vectorindex._OrExpression
	(*XNotExpression)(nil),                 // 10: vectorindex._NotExpression
	(*XEqualsExpression)(nil),              // 11: vectorindex._EqualsExpression
	(*XGreaterThanExpression)(nil),         // 12: vectorindex._GreaterThanExpression
	(*XGreaterThanOrEqualExpression)(nil),  // 13: vectorindex._GreaterThanOrEqualExpression
	(*XLessThanExpression)(nil),            // 14: vectorindex._LessThanExpression
	(*XLessThanOrEqualExpression)(nil),     // 15: vectorindex._LessThanOrEqualExpression
	(*XListContainsExpression)(nil),        // 16: vectorindex._ListContainsExpression
	(*XIdInSetExpression)(nil),             // 17: vectorindex._IdInSetExpression
	(*XFilterExpression)(nil),              // 18: vectorindex._FilterExpression
	(*XNoScoreThreshold)(nil),              // 19: vectorindex._NoScoreThreshold
	(*XSearchRequest)(nil),                 // 20: vectorindex._SearchRequest
	(*XSearchAndFetchVectorsRequest)(nil),  // 21: vectorindex._SearchAndFetchVectorsRequest
	(*XSearchHit)(nil),                     // 22: vectorindex._SearchHit
	(*XSearchAndFetchVectorsHit)(nil),      // 23: vectorindex._SearchAndFetchVectorsHit
	(*XSearchResponse)(nil),                // 24: vectorindex._SearchResponse
	(*XSearchAndFetchVectorsResponse)(nil), // 25: vectorindex._SearchAndFetchVectorsResponse
	(*XGetItemMetadataBatchRequest)(nil),   // 26: vectorindex._GetItemMetadataBatchRequest
	(*XItemMetadataResponse)(nil),          // 27: vectorindex._ItemMetadataResponse
	(*XGetItemMetadataBatchResponse)(nil),  // 28: vectorindex._GetItemMetadataBatchResponse
	(*XGetItemBatchRequest)(nil),           // 29: vectorindex._GetItemBatchRequest
	(*XItemResponse)(nil),                  // 30: vectorindex._ItemResponse
	(*XGetItemBatchResponse)(nil),          // 31: vectorindex._GetItemBatchResponse
	(*XCountItemsRequest)(nil),             // 32: vectorindex._CountItemsRequest
	(*XCountItemsResponse)(nil),            // 33: vectorindex._CountItemsResponse
	(*XMetadata_XListOfStrings)(nil),       // 34: vectorindex._Metadata._ListOfStrings
	(*XMetadataRequest_Some)(nil),          // 35: vectorindex._MetadataRequest.Some
	(*XMetadataRequest_All)(nil),           // 36: vectorindex._MetadataRequest.All
	(*XItemMetadataResponse_XMiss)(nil),    // 37: vectorindex._ItemMetadataResponse._Miss
	(*XItemMetadataResponse_XHit)(nil),     // 38: vectorindex._ItemMetadataResponse._Hit
	(*XItemResponse_XMiss)(nil),            // 39: vectorindex._ItemResponse._Miss
	(*XItemResponse_XHit)(nil),             // 40: vectorindex._ItemResponse._Hit
	(*XCountItemsRequest_All)(nil),         // 41: vectorindex._CountItemsRequest.All
}
var file_vectorindex_proto_depIdxs = []int32{
	5,  // 0: vectorindex._Item.vector:type_name -> vectorindex._Vector
	6,  // 1: vectorindex._Item.metadata:type_name -> vectorindex._Metadata
	0,  // 2: vectorindex._UpsertItemBatchRequest.items:type_name -> vectorindex._Item
	18, // 3: vectorindex._DeleteItemBatchRequest.filter:type_name -> vectorindex._FilterExpression
	34, // 4: vectorindex._Metadata.list_of_strings_value:type_name -> vectorindex._Metadata._ListOfStrings
	35, // 5: vectorindex._MetadataRequest.some:type_name -> vectorindex._MetadataRequest.Some
	36, // 6: vectorindex._MetadataRequest.all:type_name -> vectorindex._MetadataRequest.All
	18, // 7: vectorindex._AndExpression.first_expression:type_name -> vectorindex._FilterExpression
	18, // 8: vectorindex._AndExpression.second_expression:type_name -> vectorindex._FilterExpression
	18, // 9: vectorindex._OrExpression.first_expression:type_name -> vectorindex._FilterExpression
	18, // 10: vectorindex._OrExpression.second_expression:type_name -> vectorindex._FilterExpression
	18, // 11: vectorindex._NotExpression.expression_to_negate:type_name -> vectorindex._FilterExpression
	11, // 12: vectorindex._FilterExpression.equals_expression:type_name -> vectorindex._EqualsExpression
	8,  // 13: vectorindex._FilterExpression.and_expression:type_name -> vectorindex._AndExpression
	9,  // 14: vectorindex._FilterExpression.or_expression:type_name -> vectorindex._OrExpression
	10, // 15: vectorindex._FilterExpression.not_expression:type_name -> vectorindex._NotExpression
	12, // 16: vectorindex._FilterExpression.greater_than_expression:type_name -> vectorindex._GreaterThanExpression
	13, // 17: vectorindex._FilterExpression.greater_than_or_equal_expression:type_name -> vectorindex._GreaterThanOrEqualExpression
	14, // 18: vectorindex._FilterExpression.less_than_expression:type_name -> vectorindex._LessThanExpression
	15, // 19: vectorindex._FilterExpression.less_than_or_equal_expression:type_name -> vectorindex._LessThanOrEqualExpression
	16, // 20: vectorindex._FilterExpression.list_contains_expression:type_name -> vectorindex._ListContainsExpression
	17, // 21: vectorindex._FilterExpression.id_in_set_expression:type_name -> vectorindex._IdInSetExpression
	5,  // 22: vectorindex._SearchRequest.query_vector:type_name -> vectorindex._Vector
	7,  // 23: vectorindex._SearchRequest.metadata_fields:type_name -> vectorindex._MetadataRequest
	19, // 24: vectorindex._SearchRequest.no_score_threshold:type_name -> vectorindex._NoScoreThreshold
	18, // 25: vectorindex._SearchRequest.filter:type_name -> vectorindex._FilterExpression
	5,  // 26: vectorindex._SearchAndFetchVectorsRequest.query_vector:type_name -> vectorindex._Vector
	7,  // 27: vectorindex._SearchAndFetchVectorsRequest.metadata_fields:type_name -> vectorindex._MetadataRequest
	19, // 28: vectorindex._SearchAndFetchVectorsRequest.no_score_threshold:type_name -> vectorindex._NoScoreThreshold
	18, // 29: vectorindex._SearchAndFetchVectorsRequest.filter:type_name -> vectorindex._FilterExpression
	6,  // 30: vectorindex._SearchHit.metadata:type_name -> vectorindex._Metadata
	6,  // 31: vectorindex._SearchAndFetchVectorsHit.metadata:type_name -> vectorindex._Metadata
	5,  // 32: vectorindex._SearchAndFetchVectorsHit.vector:type_name -> vectorindex._Vector
	22, // 33: vectorindex._SearchResponse.hits:type_name -> vectorindex._SearchHit
	23, // 34: vectorindex._SearchAndFetchVectorsResponse.hits:type_name -> vectorindex._SearchAndFetchVectorsHit
	7,  // 35: vectorindex._GetItemMetadataBatchRequest.metadata_fields:type_name -> vectorindex._MetadataRequest
	18, // 36: vectorindex._GetItemMetadataBatchRequest.filter:type_name -> vectorindex._FilterExpression
	37, // 37: vectorindex._ItemMetadataResponse.miss:type_name -> vectorindex._ItemMetadataResponse._Miss
	38, // 38: vectorindex._ItemMetadataResponse.hit:type_name -> vectorindex._ItemMetadataResponse._Hit
	6,  // 39: vectorindex._ItemMetadataResponse.metadata:type_name -> vectorindex._Metadata
	27, // 40: vectorindex._GetItemMetadataBatchResponse.item_metadata_response:type_name -> vectorindex._ItemMetadataResponse
	7,  // 41: vectorindex._GetItemBatchRequest.metadata_fields:type_name -> vectorindex._MetadataRequest
	18, // 42: vectorindex._GetItemBatchRequest.filter:type_name -> vectorindex._FilterExpression
	39, // 43: vectorindex._ItemResponse.miss:type_name -> vectorindex._ItemResponse._Miss
	40, // 44: vectorindex._ItemResponse.hit:type_name -> vectorindex._ItemResponse._Hit
	5,  // 45: vectorindex._ItemResponse.vector:type_name -> vectorindex._Vector
	6,  // 46: vectorindex._ItemResponse.metadata:type_name -> vectorindex._Metadata
	30, // 47: vectorindex._GetItemBatchResponse.item_response:type_name -> vectorindex._ItemResponse
	41, // 48: vectorindex._CountItemsRequest.all:type_name -> vectorindex._CountItemsRequest.All
	6,  // 49: vectorindex._ItemMetadataResponse._Hit.metadata:type_name -> vectorindex._Metadata
	5,  // 50: vectorindex._ItemResponse._Hit.vector:type_name -> vectorindex._Vector
	6,  // 51: vectorindex._ItemResponse._Hit.metadata:type_name -> vectorindex._Metadata
	1,  // 52: vectorindex.VectorIndex.UpsertItemBatch:input_type -> vectorindex._UpsertItemBatchRequest
	3,  // 53: vectorindex.VectorIndex.DeleteItemBatch:input_type -> vectorindex._DeleteItemBatchRequest
	20, // 54: vectorindex.VectorIndex.Search:input_type -> vectorindex._SearchRequest
	21, // 55: vectorindex.VectorIndex.SearchAndFetchVectors:input_type -> vectorindex._SearchAndFetchVectorsRequest
	26, // 56: vectorindex.VectorIndex.GetItemMetadataBatch:input_type -> vectorindex._GetItemMetadataBatchRequest
	29, // 57: vectorindex.VectorIndex.GetItemBatch:input_type -> vectorindex._GetItemBatchRequest
	32, // 58: vectorindex.VectorIndex.CountItems:input_type -> vectorindex._CountItemsRequest
	2,  // 59: vectorindex.VectorIndex.UpsertItemBatch:output_type -> vectorindex._UpsertItemBatchResponse
	4,  // 60: vectorindex.VectorIndex.DeleteItemBatch:output_type -> vectorindex._DeleteItemBatchResponse
	24, // 61: vectorindex.VectorIndex.Search:output_type -> vectorindex._SearchResponse
	25, // 62: vectorindex.VectorIndex.SearchAndFetchVectors:output_type -> vectorindex._SearchAndFetchVectorsResponse
	28, // 63: vectorindex.VectorIndex.GetItemMetadataBatch:output_type -> vectorindex._GetItemMetadataBatchResponse
	31, // 64: vectorindex.VectorIndex.GetItemBatch:output_type -> vectorindex._GetItemBatchResponse
	33, // 65: vectorindex.VectorIndex.CountItems:output_type -> vectorindex._CountItemsResponse
	59, // [59:66] is the sub-list for method output_type
	52, // [52:59] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_vectorindex_proto_init() }
func file_vectorindex_proto_init() {
	if File_vectorindex_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vectorindex_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*XItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*XUpsertItemBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*XUpsertItemBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*XDeleteItemBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*XDeleteItemBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*XVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*XMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*XMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*XAndExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*XOrExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*XNotExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*XEqualsExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*XGreaterThanExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*XGreaterThanOrEqualExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*XLessThanExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*XLessThanOrEqualExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*XListContainsExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*XIdInSetExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*XFilterExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*XNoScoreThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*XSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*XSearchAndFetchVectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*XSearchHit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*XSearchAndFetchVectorsHit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*XSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*XSearchAndFetchVectorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*XGetItemMetadataBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*XItemMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*XGetItemMetadataBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*XGetItemBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*XItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*XGetItemBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*XCountItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*XCountItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*XMetadata_XListOfStrings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*XMetadataRequest_Some); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*XMetadataRequest_All); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*XItemMetadataResponse_XMiss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*XItemMetadataResponse_XHit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*XItemResponse_XMiss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*XItemResponse_XHit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vectorindex_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*XCountItemsRequest_All); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vectorindex_proto_msgTypes[6].OneofWrappers = []any{
		(*XMetadata_StringValue)(nil),
		(*XMetadata_IntegerValue)(nil),
		(*XMetadata_DoubleValue)(nil),
		(*XMetadata_BooleanValue)(nil),
		(*XMetadata_ListOfStringsValue)(nil),
	}
	file_vectorindex_proto_msgTypes[7].OneofWrappers = []any{
		(*XMetadataRequest_Some_)(nil),
		(*XMetadataRequest_All_)(nil),
	}
	file_vectorindex_proto_msgTypes[11].OneofWrappers = []any{
		(*XEqualsExpression_StringValue)(nil),
		(*XEqualsExpression_IntegerValue)(nil),
		(*XEqualsExpression_FloatValue)(nil),
		(*XEqualsExpression_BooleanValue)(nil),
	}
	file_vectorindex_proto_msgTypes[12].OneofWrappers = []any{
		(*XGreaterThanExpression_IntegerValue)(nil),
		(*XGreaterThanExpression_FloatValue)(nil),
	}
	file_vectorindex_proto_msgTypes[13].OneofWrappers = []any{
		(*XGreaterThanOrEqualExpression_IntegerValue)(nil),
		(*XGreaterThanOrEqualExpression_FloatValue)(nil),
	}
	file_vectorindex_proto_msgTypes[14].OneofWrappers = []any{
		(*XLessThanExpression_IntegerValue)(nil),
		(*XLessThanExpression_FloatValue)(nil),
	}
	file_vectorindex_proto_msgTypes[15].OneofWrappers = []any{
		(*XLessThanOrEqualExpression_IntegerValue)(nil),
		(*XLessThanOrEqualExpression_FloatValue)(nil),
	}
	file_vectorindex_proto_msgTypes[16].OneofWrappers = []any{
		(*XListContainsExpression_StringValue)(nil),
	}
	file_vectorindex_proto_msgTypes[18].OneofWrappers = []any{
		(*XFilterExpression_EqualsExpression)(nil),
		(*XFilterExpression_AndExpression)(nil),
		(*XFilterExpression_OrExpression)(nil),
		(*XFilterExpression_NotExpression)(nil),
		(*XFilterExpression_GreaterThanExpression)(nil),
		(*XFilterExpression_GreaterThanOrEqualExpression)(nil),
		(*XFilterExpression_LessThanExpression)(nil),
		(*XFilterExpression_LessThanOrEqualExpression)(nil),
		(*XFilterExpression_ListContainsExpression)(nil),
		(*XFilterExpression_IdInSetExpression)(nil),
	}
	file_vectorindex_proto_msgTypes[20].OneofWrappers = []any{
		(*XSearchRequest_ScoreThreshold)(nil),
		(*XSearchRequest_NoScoreThreshold)(nil),
	}
	file_vectorindex_proto_msgTypes[21].OneofWrappers = []any{
		(*XSearchAndFetchVectorsRequest_ScoreThreshold)(nil),
		(*XSearchAndFetchVectorsRequest_NoScoreThreshold)(nil),
	}
	file_vectorindex_proto_msgTypes[27].OneofWrappers = []any{
		(*XItemMetadataResponse_Miss)(nil),
		(*XItemMetadataResponse_Hit)(nil),
	}
	file_vectorindex_proto_msgTypes[30].OneofWrappers = []any{
		(*XItemResponse_Miss)(nil),
		(*XItemResponse_Hit)(nil),
	}
	file_vectorindex_proto_msgTypes[32].OneofWrappers = []any{
		(*XCountItemsRequest_All_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vectorindex_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vectorindex_proto_goTypes,
		DependencyIndexes: file_vectorindex_proto_depIdxs,
		MessageInfos:      file_vectorindex_proto_msgTypes,
	}.Build()
	File_vectorindex_proto = out.File
	file_vectorindex_proto_rawDesc = nil
	file_vectorindex_proto_goTypes = nil
	file_vectorindex_proto_depIdxs = nil
}
