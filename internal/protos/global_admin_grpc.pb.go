// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.18.1
// source: global_admin.proto

package client_sdk_go

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GlobalAdmin_GetAccounts_FullMethodName               = "/global_admin.GlobalAdmin/GetAccounts"
	GlobalAdmin_GetInvitationsForUser_FullMethodName     = "/global_admin.GlobalAdmin/GetInvitationsForUser"
	GlobalAdmin_GetAccountSessionToken_FullMethodName    = "/global_admin.GlobalAdmin/GetAccountSessionToken"
	GlobalAdmin_AddMember_FullMethodName                 = "/global_admin.GlobalAdmin/AddMember"
	GlobalAdmin_RemoveMember_FullMethodName              = "/global_admin.GlobalAdmin/RemoveMember"
	GlobalAdmin_ListMembers_FullMethodName               = "/global_admin.GlobalAdmin/ListMembers"
	GlobalAdmin_GetEndpointsForAccount_FullMethodName    = "/global_admin.GlobalAdmin/GetEndpointsForAccount"
	GlobalAdmin_SetAccountName_FullMethodName            = "/global_admin.GlobalAdmin/SetAccountName"
	GlobalAdmin_InviteMember_FullMethodName              = "/global_admin.GlobalAdmin/InviteMember"
	GlobalAdmin_AcceptInvitation_FullMethodName          = "/global_admin.GlobalAdmin/AcceptInvitation"
	GlobalAdmin_RejectInvitation_FullMethodName          = "/global_admin.GlobalAdmin/RejectInvitation"
	GlobalAdmin_ListInvitationsForAccount_FullMethodName = "/global_admin.GlobalAdmin/ListInvitationsForAccount"
	GlobalAdmin_RevokeInvitation_FullMethodName          = "/global_admin.GlobalAdmin/RevokeInvitation"
)

// GlobalAdminClient is the client API for GlobalAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalAdminClient interface {
	GetAccounts(ctx context.Context, in *XGetAccountsRequest, opts ...grpc.CallOption) (*XGetAccountsResponse, error)
	GetInvitationsForUser(ctx context.Context, in *XGetInvitationsForUserRequest, opts ...grpc.CallOption) (*XGetInvitationsForUserResponse, error)
	GetAccountSessionToken(ctx context.Context, in *XGetAccountSessionTokenRequest, opts ...grpc.CallOption) (*XGetAccountSessionTokenResponse, error)
	AddMember(ctx context.Context, in *XAddMemberRequest, opts ...grpc.CallOption) (*XAddMemberResponse, error)
	RemoveMember(ctx context.Context, in *XRemoveMemberRequest, opts ...grpc.CallOption) (*XRemoveMemberResponse, error)
	ListMembers(ctx context.Context, in *XListMembersRequest, opts ...grpc.CallOption) (*XListMembersResponse, error)
	GetEndpointsForAccount(ctx context.Context, in *XGetEndpointsForAccountRequest, opts ...grpc.CallOption) (*XGetEndpointsForAccountResponse, error)
	SetAccountName(ctx context.Context, in *XSetAccountNameRequest, opts ...grpc.CallOption) (*XSetAccountNameResponse, error)
	InviteMember(ctx context.Context, in *XInviteMemberRequest, opts ...grpc.CallOption) (*XInviteMemberResponse, error)
	AcceptInvitation(ctx context.Context, in *XAcceptInvitationRequest, opts ...grpc.CallOption) (*XAcceptInvitationResponse, error)
	RejectInvitation(ctx context.Context, in *XRejectInvitationRequest, opts ...grpc.CallOption) (*XRejectInvitationResponse, error)
	ListInvitationsForAccount(ctx context.Context, in *XListInvitationsForAccountRequest, opts ...grpc.CallOption) (*XListInvitationsForAccountResponse, error)
	RevokeInvitation(ctx context.Context, in *XRevokeInvitationRequest, opts ...grpc.CallOption) (*XRevokeInvitationResponse, error)
}

type globalAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalAdminClient(cc grpc.ClientConnInterface) GlobalAdminClient {
	return &globalAdminClient{cc}
}

func (c *globalAdminClient) GetAccounts(ctx context.Context, in *XGetAccountsRequest, opts ...grpc.CallOption) (*XGetAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XGetAccountsResponse)
	err := c.cc.Invoke(ctx, GlobalAdmin_GetAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAdminClient) GetInvitationsForUser(ctx context.Context, in *XGetInvitationsForUserRequest, opts ...grpc.CallOption) (*XGetInvitationsForUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XGetInvitationsForUserResponse)
	err := c.cc.Invoke(ctx, GlobalAdmin_GetInvitationsForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAdminClient) GetAccountSessionToken(ctx context.Context, in *XGetAccountSessionTokenRequest, opts ...grpc.CallOption) (*XGetAccountSessionTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XGetAccountSessionTokenResponse)
	err := c.cc.Invoke(ctx, GlobalAdmin_GetAccountSessionToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAdminClient) AddMember(ctx context.Context, in *XAddMemberRequest, opts ...grpc.CallOption) (*XAddMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XAddMemberResponse)
	err := c.cc.Invoke(ctx, GlobalAdmin_AddMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAdminClient) RemoveMember(ctx context.Context, in *XRemoveMemberRequest, opts ...grpc.CallOption) (*XRemoveMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XRemoveMemberResponse)
	err := c.cc.Invoke(ctx, GlobalAdmin_RemoveMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAdminClient) ListMembers(ctx context.Context, in *XListMembersRequest, opts ...grpc.CallOption) (*XListMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XListMembersResponse)
	err := c.cc.Invoke(ctx, GlobalAdmin_ListMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAdminClient) GetEndpointsForAccount(ctx context.Context, in *XGetEndpointsForAccountRequest, opts ...grpc.CallOption) (*XGetEndpointsForAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XGetEndpointsForAccountResponse)
	err := c.cc.Invoke(ctx, GlobalAdmin_GetEndpointsForAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAdminClient) SetAccountName(ctx context.Context, in *XSetAccountNameRequest, opts ...grpc.CallOption) (*XSetAccountNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XSetAccountNameResponse)
	err := c.cc.Invoke(ctx, GlobalAdmin_SetAccountName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAdminClient) InviteMember(ctx context.Context, in *XInviteMemberRequest, opts ...grpc.CallOption) (*XInviteMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XInviteMemberResponse)
	err := c.cc.Invoke(ctx, GlobalAdmin_InviteMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAdminClient) AcceptInvitation(ctx context.Context, in *XAcceptInvitationRequest, opts ...grpc.CallOption) (*XAcceptInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XAcceptInvitationResponse)
	err := c.cc.Invoke(ctx, GlobalAdmin_AcceptInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAdminClient) RejectInvitation(ctx context.Context, in *XRejectInvitationRequest, opts ...grpc.CallOption) (*XRejectInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XRejectInvitationResponse)
	err := c.cc.Invoke(ctx, GlobalAdmin_RejectInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAdminClient) ListInvitationsForAccount(ctx context.Context, in *XListInvitationsForAccountRequest, opts ...grpc.CallOption) (*XListInvitationsForAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XListInvitationsForAccountResponse)
	err := c.cc.Invoke(ctx, GlobalAdmin_ListInvitationsForAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalAdminClient) RevokeInvitation(ctx context.Context, in *XRevokeInvitationRequest, opts ...grpc.CallOption) (*XRevokeInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XRevokeInvitationResponse)
	err := c.cc.Invoke(ctx, GlobalAdmin_RevokeInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobalAdminServer is the server API for GlobalAdmin service.
// All implementations must embed UnimplementedGlobalAdminServer
// for forward compatibility
type GlobalAdminServer interface {
	GetAccounts(context.Context, *XGetAccountsRequest) (*XGetAccountsResponse, error)
	GetInvitationsForUser(context.Context, *XGetInvitationsForUserRequest) (*XGetInvitationsForUserResponse, error)
	GetAccountSessionToken(context.Context, *XGetAccountSessionTokenRequest) (*XGetAccountSessionTokenResponse, error)
	AddMember(context.Context, *XAddMemberRequest) (*XAddMemberResponse, error)
	RemoveMember(context.Context, *XRemoveMemberRequest) (*XRemoveMemberResponse, error)
	ListMembers(context.Context, *XListMembersRequest) (*XListMembersResponse, error)
	GetEndpointsForAccount(context.Context, *XGetEndpointsForAccountRequest) (*XGetEndpointsForAccountResponse, error)
	SetAccountName(context.Context, *XSetAccountNameRequest) (*XSetAccountNameResponse, error)
	InviteMember(context.Context, *XInviteMemberRequest) (*XInviteMemberResponse, error)
	AcceptInvitation(context.Context, *XAcceptInvitationRequest) (*XAcceptInvitationResponse, error)
	RejectInvitation(context.Context, *XRejectInvitationRequest) (*XRejectInvitationResponse, error)
	ListInvitationsForAccount(context.Context, *XListInvitationsForAccountRequest) (*XListInvitationsForAccountResponse, error)
	RevokeInvitation(context.Context, *XRevokeInvitationRequest) (*XRevokeInvitationResponse, error)
	mustEmbedUnimplementedGlobalAdminServer()
}

// UnimplementedGlobalAdminServer must be embedded to have forward compatible implementations.
type UnimplementedGlobalAdminServer struct {
}

func (UnimplementedGlobalAdminServer) GetAccounts(context.Context, *XGetAccountsRequest) (*XGetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedGlobalAdminServer) GetInvitationsForUser(context.Context, *XGetInvitationsForUserRequest) (*XGetInvitationsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitationsForUser not implemented")
}
func (UnimplementedGlobalAdminServer) GetAccountSessionToken(context.Context, *XGetAccountSessionTokenRequest) (*XGetAccountSessionTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountSessionToken not implemented")
}
func (UnimplementedGlobalAdminServer) AddMember(context.Context, *XAddMemberRequest) (*XAddMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedGlobalAdminServer) RemoveMember(context.Context, *XRemoveMemberRequest) (*XRemoveMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedGlobalAdminServer) ListMembers(context.Context, *XListMembersRequest) (*XListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedGlobalAdminServer) GetEndpointsForAccount(context.Context, *XGetEndpointsForAccountRequest) (*XGetEndpointsForAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpointsForAccount not implemented")
}
func (UnimplementedGlobalAdminServer) SetAccountName(context.Context, *XSetAccountNameRequest) (*XSetAccountNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountName not implemented")
}
func (UnimplementedGlobalAdminServer) InviteMember(context.Context, *XInviteMemberRequest) (*XInviteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMember not implemented")
}
func (UnimplementedGlobalAdminServer) AcceptInvitation(context.Context, *XAcceptInvitationRequest) (*XAcceptInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (UnimplementedGlobalAdminServer) RejectInvitation(context.Context, *XRejectInvitationRequest) (*XRejectInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectInvitation not implemented")
}
func (UnimplementedGlobalAdminServer) ListInvitationsForAccount(context.Context, *XListInvitationsForAccountRequest) (*XListInvitationsForAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvitationsForAccount not implemented")
}
func (UnimplementedGlobalAdminServer) RevokeInvitation(context.Context, *XRevokeInvitationRequest) (*XRevokeInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeInvitation not implemented")
}
func (UnimplementedGlobalAdminServer) mustEmbedUnimplementedGlobalAdminServer() {}

// UnsafeGlobalAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalAdminServer will
// result in compilation errors.
type UnsafeGlobalAdminServer interface {
	mustEmbedUnimplementedGlobalAdminServer()
}

func RegisterGlobalAdminServer(s grpc.ServiceRegistrar, srv GlobalAdminServer) {
	s.RegisterService(&GlobalAdmin_ServiceDesc, srv)
}

func _GlobalAdmin_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XGetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAdminServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalAdmin_GetAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAdminServer).GetAccounts(ctx, req.(*XGetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAdmin_GetInvitationsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XGetInvitationsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAdminServer).GetInvitationsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalAdmin_GetInvitationsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAdminServer).GetInvitationsForUser(ctx, req.(*XGetInvitationsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAdmin_GetAccountSessionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XGetAccountSessionTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAdminServer).GetAccountSessionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalAdmin_GetAccountSessionToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAdminServer).GetAccountSessionToken(ctx, req.(*XGetAccountSessionTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAdmin_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XAddMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAdminServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalAdmin_AddMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAdminServer).AddMember(ctx, req.(*XAddMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAdmin_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XRemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAdminServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalAdmin_RemoveMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAdminServer).RemoveMember(ctx, req.(*XRemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAdmin_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAdminServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalAdmin_ListMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAdminServer).ListMembers(ctx, req.(*XListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAdmin_GetEndpointsForAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XGetEndpointsForAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAdminServer).GetEndpointsForAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalAdmin_GetEndpointsForAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAdminServer).GetEndpointsForAccount(ctx, req.(*XGetEndpointsForAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAdmin_SetAccountName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XSetAccountNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAdminServer).SetAccountName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalAdmin_SetAccountName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAdminServer).SetAccountName(ctx, req.(*XSetAccountNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAdmin_InviteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XInviteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAdminServer).InviteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalAdmin_InviteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAdminServer).InviteMember(ctx, req.(*XInviteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAdmin_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XAcceptInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAdminServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalAdmin_AcceptInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAdminServer).AcceptInvitation(ctx, req.(*XAcceptInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAdmin_RejectInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XRejectInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAdminServer).RejectInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalAdmin_RejectInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAdminServer).RejectInvitation(ctx, req.(*XRejectInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAdmin_ListInvitationsForAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XListInvitationsForAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAdminServer).ListInvitationsForAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalAdmin_ListInvitationsForAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAdminServer).ListInvitationsForAccount(ctx, req.(*XListInvitationsForAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalAdmin_RevokeInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XRevokeInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalAdminServer).RevokeInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalAdmin_RevokeInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalAdminServer).RevokeInvitation(ctx, req.(*XRevokeInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GlobalAdmin_ServiceDesc is the grpc.ServiceDesc for GlobalAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "global_admin.GlobalAdmin",
	HandlerType: (*GlobalAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccounts",
			Handler:    _GlobalAdmin_GetAccounts_Handler,
		},
		{
			MethodName: "GetInvitationsForUser",
			Handler:    _GlobalAdmin_GetInvitationsForUser_Handler,
		},
		{
			MethodName: "GetAccountSessionToken",
			Handler:    _GlobalAdmin_GetAccountSessionToken_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _GlobalAdmin_AddMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _GlobalAdmin_RemoveMember_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _GlobalAdmin_ListMembers_Handler,
		},
		{
			MethodName: "GetEndpointsForAccount",
			Handler:    _GlobalAdmin_GetEndpointsForAccount_Handler,
		},
		{
			MethodName: "SetAccountName",
			Handler:    _GlobalAdmin_SetAccountName_Handler,
		},
		{
			MethodName: "InviteMember",
			Handler:    _GlobalAdmin_InviteMember_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _GlobalAdmin_AcceptInvitation_Handler,
		},
		{
			MethodName: "RejectInvitation",
			Handler:    _GlobalAdmin_RejectInvitation_Handler,
		},
		{
			MethodName: "ListInvitationsForAccount",
			Handler:    _GlobalAdmin_ListInvitationsForAccount_Handler,
		},
		{
			MethodName: "RevokeInvitation",
			Handler:    _GlobalAdmin_RevokeInvitation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "global_admin.proto",
}
