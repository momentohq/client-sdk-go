// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.24.4
// source: permissionmessages.proto

package client_sdk_go

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Aliases for categories of functionality.
type CacheRole int32

const (
	CacheRole_CachePermitNone CacheRole = 0
	// Restricts access to apis that read and write data from caches: No higher level resource description or modification.
	CacheRole_CacheReadWrite CacheRole = 1
	// Restricts access to apis that read from caches: No higher level resource description or modification.
	CacheRole_CacheReadOnly CacheRole = 2
	// Restricts access to apis that write from caches: No higher level resource description or modification.
	// Doesn't allow conditional write APIs (SetIfNotExists, IncreaseTTL etc)
	CacheRole_CacheWriteOnly CacheRole = 3
)

// Enum value maps for CacheRole.
var (
	CacheRole_name = map[int32]string{
		0: "CachePermitNone",
		1: "CacheReadWrite",
		2: "CacheReadOnly",
		3: "CacheWriteOnly",
	}
	CacheRole_value = map[string]int32{
		"CachePermitNone": 0,
		"CacheReadWrite":  1,
		"CacheReadOnly":   2,
		"CacheWriteOnly":  3,
	}
)

func (x CacheRole) Enum() *CacheRole {
	p := new(CacheRole)
	*p = x
	return p
}

func (x CacheRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheRole) Descriptor() protoreflect.EnumDescriptor {
	return file_permissionmessages_proto_enumTypes[0].Descriptor()
}

func (CacheRole) Type() protoreflect.EnumType {
	return &file_permissionmessages_proto_enumTypes[0]
}

func (x CacheRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheRole.Descriptor instead.
func (CacheRole) EnumDescriptor() ([]byte, []int) {
	return file_permissionmessages_proto_rawDescGZIP(), []int{0}
}

// Aliases for categories of functionality.
type TopicRole int32

const (
	TopicRole_TopicPermitNone TopicRole = 0
	// Restricts access to apis that read and write data from topics: No higher level resource description or modification.
	TopicRole_TopicReadWrite TopicRole = 1
	// Restricts access to apis that read from topics: No higher level resource description or modification.
	TopicRole_TopicReadOnly TopicRole = 2
	// Restricts access to apis that write from topics: No higher level resource description or modification.
	TopicRole_TopicWriteOnly TopicRole = 3
)

// Enum value maps for TopicRole.
var (
	TopicRole_name = map[int32]string{
		0: "TopicPermitNone",
		1: "TopicReadWrite",
		2: "TopicReadOnly",
		3: "TopicWriteOnly",
	}
	TopicRole_value = map[string]int32{
		"TopicPermitNone": 0,
		"TopicReadWrite":  1,
		"TopicReadOnly":   2,
		"TopicWriteOnly":  3,
	}
)

func (x TopicRole) Enum() *TopicRole {
	p := new(TopicRole)
	*p = x
	return p
}

func (x TopicRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicRole) Descriptor() protoreflect.EnumDescriptor {
	return file_permissionmessages_proto_enumTypes[1].Descriptor()
}

func (TopicRole) Type() protoreflect.EnumType {
	return &file_permissionmessages_proto_enumTypes[1]
}

func (x TopicRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicRole.Descriptor instead.
func (TopicRole) EnumDescriptor() ([]byte, []int) {
	return file_permissionmessages_proto_rawDescGZIP(), []int{1}
}

type SuperUserPermissions int32

const (
	SuperUserPermissions_SuperUser SuperUserPermissions = 0
)

// Enum value maps for SuperUserPermissions.
var (
	SuperUserPermissions_name = map[int32]string{
		0: "SuperUser",
	}
	SuperUserPermissions_value = map[string]int32{
		"SuperUser": 0,
	}
)

func (x SuperUserPermissions) Enum() *SuperUserPermissions {
	p := new(SuperUserPermissions)
	*p = x
	return p
}

func (x SuperUserPermissions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SuperUserPermissions) Descriptor() protoreflect.EnumDescriptor {
	return file_permissionmessages_proto_enumTypes[2].Descriptor()
}

func (SuperUserPermissions) Type() protoreflect.EnumType {
	return &file_permissionmessages_proto_enumTypes[2]
}

func (x SuperUserPermissions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SuperUserPermissions.Descriptor instead.
func (SuperUserPermissions) EnumDescriptor() ([]byte, []int) {
	return file_permissionmessages_proto_rawDescGZIP(), []int{2}
}

type Permissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*Permissions_SuperUser
	//	*Permissions_Explicit
	Kind isPermissions_Kind `protobuf_oneof:"kind"`
}

func (x *Permissions) Reset() {
	*x = Permissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_permissionmessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permissions) ProtoMessage() {}

func (x *Permissions) ProtoReflect() protoreflect.Message {
	mi := &file_permissionmessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permissions.ProtoReflect.Descriptor instead.
func (*Permissions) Descriptor() ([]byte, []int) {
	return file_permissionmessages_proto_rawDescGZIP(), []int{0}
}

func (m *Permissions) GetKind() isPermissions_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Permissions) GetSuperUser() SuperUserPermissions {
	if x, ok := x.GetKind().(*Permissions_SuperUser); ok {
		return x.SuperUser
	}
	return SuperUserPermissions_SuperUser
}

func (x *Permissions) GetExplicit() *ExplicitPermissions {
	if x, ok := x.GetKind().(*Permissions_Explicit); ok {
		return x.Explicit
	}
	return nil
}

type isPermissions_Kind interface {
	isPermissions_Kind()
}

type Permissions_SuperUser struct {
	SuperUser SuperUserPermissions `protobuf:"varint,1,opt,name=super_user,json=superUser,proto3,enum=permission_messages.SuperUserPermissions,oneof"`
}

type Permissions_Explicit struct {
	Explicit *ExplicitPermissions `protobuf:"bytes,2,opt,name=explicit,proto3,oneof"`
}

func (*Permissions_SuperUser) isPermissions_Kind() {}

func (*Permissions_Explicit) isPermissions_Kind() {}

type ExplicitPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []*PermissionsType `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *ExplicitPermissions) Reset() {
	*x = ExplicitPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_permissionmessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplicitPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplicitPermissions) ProtoMessage() {}

func (x *ExplicitPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_permissionmessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplicitPermissions.ProtoReflect.Descriptor instead.
func (*ExplicitPermissions) Descriptor() ([]byte, []int) {
	return file_permissionmessages_proto_rawDescGZIP(), []int{1}
}

func (x *ExplicitPermissions) GetPermissions() []*PermissionsType {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type PermissionsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*PermissionsType_CachePermissions_
	//	*PermissionsType_TopicPermissions_
	Kind isPermissionsType_Kind `protobuf_oneof:"kind"`
}

func (x *PermissionsType) Reset() {
	*x = PermissionsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_permissionmessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsType) ProtoMessage() {}

func (x *PermissionsType) ProtoReflect() protoreflect.Message {
	mi := &file_permissionmessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsType.ProtoReflect.Descriptor instead.
func (*PermissionsType) Descriptor() ([]byte, []int) {
	return file_permissionmessages_proto_rawDescGZIP(), []int{2}
}

func (m *PermissionsType) GetKind() isPermissionsType_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *PermissionsType) GetCachePermissions() *PermissionsType_CachePermissions {
	if x, ok := x.GetKind().(*PermissionsType_CachePermissions_); ok {
		return x.CachePermissions
	}
	return nil
}

func (x *PermissionsType) GetTopicPermissions() *PermissionsType_TopicPermissions {
	if x, ok := x.GetKind().(*PermissionsType_TopicPermissions_); ok {
		return x.TopicPermissions
	}
	return nil
}

type isPermissionsType_Kind interface {
	isPermissionsType_Kind()
}

type PermissionsType_CachePermissions_ struct {
	CachePermissions *PermissionsType_CachePermissions `protobuf:"bytes,1,opt,name=cache_permissions,json=cachePermissions,proto3,oneof"`
}

type PermissionsType_TopicPermissions_ struct {
	TopicPermissions *PermissionsType_TopicPermissions `protobuf:"bytes,2,opt,name=topic_permissions,json=topicPermissions,proto3,oneof"`
}

func (*PermissionsType_CachePermissions_) isPermissionsType_Kind() {}

func (*PermissionsType_TopicPermissions_) isPermissionsType_Kind() {}

type PermissionsType_All struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PermissionsType_All) Reset() {
	*x = PermissionsType_All{}
	if protoimpl.UnsafeEnabled {
		mi := &file_permissionmessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsType_All) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsType_All) ProtoMessage() {}

func (x *PermissionsType_All) ProtoReflect() protoreflect.Message {
	mi := &file_permissionmessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsType_All.ProtoReflect.Descriptor instead.
func (*PermissionsType_All) Descriptor() ([]byte, []int) {
	return file_permissionmessages_proto_rawDescGZIP(), []int{2, 0}
}

type PermissionsType_CacheSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*PermissionsType_CacheSelector_CacheName
	Kind isPermissionsType_CacheSelector_Kind `protobuf_oneof:"kind"`
}

func (x *PermissionsType_CacheSelector) Reset() {
	*x = PermissionsType_CacheSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_permissionmessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsType_CacheSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsType_CacheSelector) ProtoMessage() {}

func (x *PermissionsType_CacheSelector) ProtoReflect() protoreflect.Message {
	mi := &file_permissionmessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsType_CacheSelector.ProtoReflect.Descriptor instead.
func (*PermissionsType_CacheSelector) Descriptor() ([]byte, []int) {
	return file_permissionmessages_proto_rawDescGZIP(), []int{2, 1}
}

func (m *PermissionsType_CacheSelector) GetKind() isPermissionsType_CacheSelector_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *PermissionsType_CacheSelector) GetCacheName() string {
	if x, ok := x.GetKind().(*PermissionsType_CacheSelector_CacheName); ok {
		return x.CacheName
	}
	return ""
}

type isPermissionsType_CacheSelector_Kind interface {
	isPermissionsType_CacheSelector_Kind()
}

type PermissionsType_CacheSelector_CacheName struct {
	CacheName string `protobuf:"bytes,1,opt,name=cache_name,json=cacheName,proto3,oneof"`
}

func (*PermissionsType_CacheSelector_CacheName) isPermissionsType_CacheSelector_Kind() {}

type PermissionsType_CacheItemSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*PermissionsType_CacheItemSelector_Key
	//	*PermissionsType_CacheItemSelector_KeyPrefix
	Kind isPermissionsType_CacheItemSelector_Kind `protobuf_oneof:"kind"`
}

func (x *PermissionsType_CacheItemSelector) Reset() {
	*x = PermissionsType_CacheItemSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_permissionmessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsType_CacheItemSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsType_CacheItemSelector) ProtoMessage() {}

func (x *PermissionsType_CacheItemSelector) ProtoReflect() protoreflect.Message {
	mi := &file_permissionmessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsType_CacheItemSelector.ProtoReflect.Descriptor instead.
func (*PermissionsType_CacheItemSelector) Descriptor() ([]byte, []int) {
	return file_permissionmessages_proto_rawDescGZIP(), []int{2, 2}
}

func (m *PermissionsType_CacheItemSelector) GetKind() isPermissionsType_CacheItemSelector_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *PermissionsType_CacheItemSelector) GetKey() []byte {
	if x, ok := x.GetKind().(*PermissionsType_CacheItemSelector_Key); ok {
		return x.Key
	}
	return nil
}

func (x *PermissionsType_CacheItemSelector) GetKeyPrefix() []byte {
	if x, ok := x.GetKind().(*PermissionsType_CacheItemSelector_KeyPrefix); ok {
		return x.KeyPrefix
	}
	return nil
}

type isPermissionsType_CacheItemSelector_Kind interface {
	isPermissionsType_CacheItemSelector_Kind()
}

type PermissionsType_CacheItemSelector_Key struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3,oneof"`
}

type PermissionsType_CacheItemSelector_KeyPrefix struct {
	KeyPrefix []byte `protobuf:"bytes,2,opt,name=key_prefix,json=keyPrefix,proto3,oneof"`
}

func (*PermissionsType_CacheItemSelector_Key) isPermissionsType_CacheItemSelector_Kind() {}

func (*PermissionsType_CacheItemSelector_KeyPrefix) isPermissionsType_CacheItemSelector_Kind() {}

type PermissionsType_CachePermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role CacheRole `protobuf:"varint,1,opt,name=role,proto3,enum=permission_messages.CacheRole" json:"role,omitempty"`
	// Types that are assignable to Cache:
	//
	//	*PermissionsType_CachePermissions_AllCaches
	//	*PermissionsType_CachePermissions_CacheSelector
	Cache isPermissionsType_CachePermissions_Cache `protobuf_oneof:"cache"`
	// Types that are assignable to CacheItem:
	//
	//	*PermissionsType_CachePermissions_AllItems
	//	*PermissionsType_CachePermissions_ItemSelector
	CacheItem isPermissionsType_CachePermissions_CacheItem `protobuf_oneof:"cache_item"`
}

func (x *PermissionsType_CachePermissions) Reset() {
	*x = PermissionsType_CachePermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_permissionmessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsType_CachePermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsType_CachePermissions) ProtoMessage() {}

func (x *PermissionsType_CachePermissions) ProtoReflect() protoreflect.Message {
	mi := &file_permissionmessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsType_CachePermissions.ProtoReflect.Descriptor instead.
func (*PermissionsType_CachePermissions) Descriptor() ([]byte, []int) {
	return file_permissionmessages_proto_rawDescGZIP(), []int{2, 3}
}

func (x *PermissionsType_CachePermissions) GetRole() CacheRole {
	if x != nil {
		return x.Role
	}
	return CacheRole_CachePermitNone
}

func (m *PermissionsType_CachePermissions) GetCache() isPermissionsType_CachePermissions_Cache {
	if m != nil {
		return m.Cache
	}
	return nil
}

func (x *PermissionsType_CachePermissions) GetAllCaches() *PermissionsType_All {
	if x, ok := x.GetCache().(*PermissionsType_CachePermissions_AllCaches); ok {
		return x.AllCaches
	}
	return nil
}

func (x *PermissionsType_CachePermissions) GetCacheSelector() *PermissionsType_CacheSelector {
	if x, ok := x.GetCache().(*PermissionsType_CachePermissions_CacheSelector); ok {
		return x.CacheSelector
	}
	return nil
}

func (m *PermissionsType_CachePermissions) GetCacheItem() isPermissionsType_CachePermissions_CacheItem {
	if m != nil {
		return m.CacheItem
	}
	return nil
}

func (x *PermissionsType_CachePermissions) GetAllItems() *PermissionsType_All {
	if x, ok := x.GetCacheItem().(*PermissionsType_CachePermissions_AllItems); ok {
		return x.AllItems
	}
	return nil
}

func (x *PermissionsType_CachePermissions) GetItemSelector() *PermissionsType_CacheItemSelector {
	if x, ok := x.GetCacheItem().(*PermissionsType_CachePermissions_ItemSelector); ok {
		return x.ItemSelector
	}
	return nil
}

type isPermissionsType_CachePermissions_Cache interface {
	isPermissionsType_CachePermissions_Cache()
}

type PermissionsType_CachePermissions_AllCaches struct {
	AllCaches *PermissionsType_All `protobuf:"bytes,2,opt,name=all_caches,json=allCaches,proto3,oneof"`
}

type PermissionsType_CachePermissions_CacheSelector struct {
	CacheSelector *PermissionsType_CacheSelector `protobuf:"bytes,3,opt,name=cache_selector,json=cacheSelector,proto3,oneof"`
}

func (*PermissionsType_CachePermissions_AllCaches) isPermissionsType_CachePermissions_Cache() {}

func (*PermissionsType_CachePermissions_CacheSelector) isPermissionsType_CachePermissions_Cache() {}

type isPermissionsType_CachePermissions_CacheItem interface {
	isPermissionsType_CachePermissions_CacheItem()
}

type PermissionsType_CachePermissions_AllItems struct {
	AllItems *PermissionsType_All `protobuf:"bytes,4,opt,name=all_items,json=allItems,proto3,oneof"`
}

type PermissionsType_CachePermissions_ItemSelector struct {
	ItemSelector *PermissionsType_CacheItemSelector `protobuf:"bytes,5,opt,name=item_selector,json=itemSelector,proto3,oneof"`
}

func (*PermissionsType_CachePermissions_AllItems) isPermissionsType_CachePermissions_CacheItem() {}

func (*PermissionsType_CachePermissions_ItemSelector) isPermissionsType_CachePermissions_CacheItem() {
}

type PermissionsType_TopicSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*PermissionsType_TopicSelector_TopicName
	//	*PermissionsType_TopicSelector_TopicNamePrefix
	Kind isPermissionsType_TopicSelector_Kind `protobuf_oneof:"kind"`
}

func (x *PermissionsType_TopicSelector) Reset() {
	*x = PermissionsType_TopicSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_permissionmessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsType_TopicSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsType_TopicSelector) ProtoMessage() {}

func (x *PermissionsType_TopicSelector) ProtoReflect() protoreflect.Message {
	mi := &file_permissionmessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsType_TopicSelector.ProtoReflect.Descriptor instead.
func (*PermissionsType_TopicSelector) Descriptor() ([]byte, []int) {
	return file_permissionmessages_proto_rawDescGZIP(), []int{2, 4}
}

func (m *PermissionsType_TopicSelector) GetKind() isPermissionsType_TopicSelector_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *PermissionsType_TopicSelector) GetTopicName() string {
	if x, ok := x.GetKind().(*PermissionsType_TopicSelector_TopicName); ok {
		return x.TopicName
	}
	return ""
}

func (x *PermissionsType_TopicSelector) GetTopicNamePrefix() string {
	if x, ok := x.GetKind().(*PermissionsType_TopicSelector_TopicNamePrefix); ok {
		return x.TopicNamePrefix
	}
	return ""
}

type isPermissionsType_TopicSelector_Kind interface {
	isPermissionsType_TopicSelector_Kind()
}

type PermissionsType_TopicSelector_TopicName struct {
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3,oneof"`
}

type PermissionsType_TopicSelector_TopicNamePrefix struct {
	TopicNamePrefix string `protobuf:"bytes,2,opt,name=topic_name_prefix,json=topicNamePrefix,proto3,oneof"`
}

func (*PermissionsType_TopicSelector_TopicName) isPermissionsType_TopicSelector_Kind() {}

func (*PermissionsType_TopicSelector_TopicNamePrefix) isPermissionsType_TopicSelector_Kind() {}

type PermissionsType_TopicPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role TopicRole `protobuf:"varint,1,opt,name=role,proto3,enum=permission_messages.TopicRole" json:"role,omitempty"`
	// Types that are assignable to Cache:
	//
	//	*PermissionsType_TopicPermissions_AllCaches
	//	*PermissionsType_TopicPermissions_CacheSelector
	Cache isPermissionsType_TopicPermissions_Cache `protobuf_oneof:"cache"`
	// Types that are assignable to Topic:
	//
	//	*PermissionsType_TopicPermissions_AllTopics
	//	*PermissionsType_TopicPermissions_TopicSelector
	Topic isPermissionsType_TopicPermissions_Topic `protobuf_oneof:"topic"`
}

func (x *PermissionsType_TopicPermissions) Reset() {
	*x = PermissionsType_TopicPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_permissionmessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsType_TopicPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsType_TopicPermissions) ProtoMessage() {}

func (x *PermissionsType_TopicPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_permissionmessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsType_TopicPermissions.ProtoReflect.Descriptor instead.
func (*PermissionsType_TopicPermissions) Descriptor() ([]byte, []int) {
	return file_permissionmessages_proto_rawDescGZIP(), []int{2, 5}
}

func (x *PermissionsType_TopicPermissions) GetRole() TopicRole {
	if x != nil {
		return x.Role
	}
	return TopicRole_TopicPermitNone
}

func (m *PermissionsType_TopicPermissions) GetCache() isPermissionsType_TopicPermissions_Cache {
	if m != nil {
		return m.Cache
	}
	return nil
}

func (x *PermissionsType_TopicPermissions) GetAllCaches() *PermissionsType_All {
	if x, ok := x.GetCache().(*PermissionsType_TopicPermissions_AllCaches); ok {
		return x.AllCaches
	}
	return nil
}

func (x *PermissionsType_TopicPermissions) GetCacheSelector() *PermissionsType_CacheSelector {
	if x, ok := x.GetCache().(*PermissionsType_TopicPermissions_CacheSelector); ok {
		return x.CacheSelector
	}
	return nil
}

func (m *PermissionsType_TopicPermissions) GetTopic() isPermissionsType_TopicPermissions_Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (x *PermissionsType_TopicPermissions) GetAllTopics() *PermissionsType_All {
	if x, ok := x.GetTopic().(*PermissionsType_TopicPermissions_AllTopics); ok {
		return x.AllTopics
	}
	return nil
}

func (x *PermissionsType_TopicPermissions) GetTopicSelector() *PermissionsType_TopicSelector {
	if x, ok := x.GetTopic().(*PermissionsType_TopicPermissions_TopicSelector); ok {
		return x.TopicSelector
	}
	return nil
}

type isPermissionsType_TopicPermissions_Cache interface {
	isPermissionsType_TopicPermissions_Cache()
}

type PermissionsType_TopicPermissions_AllCaches struct {
	AllCaches *PermissionsType_All `protobuf:"bytes,2,opt,name=all_caches,json=allCaches,proto3,oneof"`
}

type PermissionsType_TopicPermissions_CacheSelector struct {
	CacheSelector *PermissionsType_CacheSelector `protobuf:"bytes,3,opt,name=cache_selector,json=cacheSelector,proto3,oneof"`
}

func (*PermissionsType_TopicPermissions_AllCaches) isPermissionsType_TopicPermissions_Cache() {}

func (*PermissionsType_TopicPermissions_CacheSelector) isPermissionsType_TopicPermissions_Cache() {}

type isPermissionsType_TopicPermissions_Topic interface {
	isPermissionsType_TopicPermissions_Topic()
}

type PermissionsType_TopicPermissions_AllTopics struct {
	AllTopics *PermissionsType_All `protobuf:"bytes,4,opt,name=all_topics,json=allTopics,proto3,oneof"`
}

type PermissionsType_TopicPermissions_TopicSelector struct {
	TopicSelector *PermissionsType_TopicSelector `protobuf:"bytes,5,opt,name=topic_selector,json=topicSelector,proto3,oneof"`
}

func (*PermissionsType_TopicPermissions_AllTopics) isPermissionsType_TopicPermissions_Topic() {}

func (*PermissionsType_TopicPermissions_TopicSelector) isPermissionsType_TopicPermissions_Topic() {}

var File_permissionmessages_proto protoreflect.FileDescriptor

var file_permissionmessages_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0xa9, 0x01, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x4a, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x65,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x5d, 0x0a, 0x13, 0x45,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbb, 0x0a, 0x0a, 0x0f, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x64,
	0x0a, 0x11, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x00, 0x52, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x64, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x10, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x05, 0x0a, 0x03, 0x41, 0x6c,
	0x6c, 0x1a, 0x38, 0x0a, 0x0d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x50, 0x0a, 0x11, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0xad, 0x03,
	0x0a, 0x10, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x41, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x5b, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x47,
	0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x48, 0x01, 0x52, 0x08, 0x61,
	0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x5d, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x1a, 0x66, 0x0a,
	0x0d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x06, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0xa8, 0x03, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x49,
	0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x6c, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x0e, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x41, 0x6c, 0x6c, 0x48, 0x01, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x12, 0x5b, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52,
	0x0d, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x07,
	0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x2a, 0x5b, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f,
	0x6e, 0x6c, 0x79, 0x10, 0x03, 0x2a, 0x5b, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79,
	0x10, 0x03, 0x2a, 0x25, 0x0a, 0x14, 0x53, 0x75, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x10, 0x00, 0x42, 0x72, 0x0a, 0x18, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x68, 0x71, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x3b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x67, 0x6f, 0xaa, 0x02, 0x21, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_permissionmessages_proto_rawDescOnce sync.Once
	file_permissionmessages_proto_rawDescData = file_permissionmessages_proto_rawDesc
)

func file_permissionmessages_proto_rawDescGZIP() []byte {
	file_permissionmessages_proto_rawDescOnce.Do(func() {
		file_permissionmessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_permissionmessages_proto_rawDescData)
	})
	return file_permissionmessages_proto_rawDescData
}

var file_permissionmessages_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_permissionmessages_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_permissionmessages_proto_goTypes = []interface{}{
	(CacheRole)(0),                            // 0: permission_messages.CacheRole
	(TopicRole)(0),                            // 1: permission_messages.TopicRole
	(SuperUserPermissions)(0),                 // 2: permission_messages.SuperUserPermissions
	(*Permissions)(nil),                       // 3: permission_messages.Permissions
	(*ExplicitPermissions)(nil),               // 4: permission_messages.ExplicitPermissions
	(*PermissionsType)(nil),                   // 5: permission_messages.PermissionsType
	(*PermissionsType_All)(nil),               // 6: permission_messages.PermissionsType.All
	(*PermissionsType_CacheSelector)(nil),     // 7: permission_messages.PermissionsType.CacheSelector
	(*PermissionsType_CacheItemSelector)(nil), // 8: permission_messages.PermissionsType.CacheItemSelector
	(*PermissionsType_CachePermissions)(nil),  // 9: permission_messages.PermissionsType.CachePermissions
	(*PermissionsType_TopicSelector)(nil),     // 10: permission_messages.PermissionsType.TopicSelector
	(*PermissionsType_TopicPermissions)(nil),  // 11: permission_messages.PermissionsType.TopicPermissions
}
var file_permissionmessages_proto_depIdxs = []int32{
	2,  // 0: permission_messages.Permissions.super_user:type_name -> permission_messages.SuperUserPermissions
	4,  // 1: permission_messages.Permissions.explicit:type_name -> permission_messages.ExplicitPermissions
	5,  // 2: permission_messages.ExplicitPermissions.permissions:type_name -> permission_messages.PermissionsType
	9,  // 3: permission_messages.PermissionsType.cache_permissions:type_name -> permission_messages.PermissionsType.CachePermissions
	11, // 4: permission_messages.PermissionsType.topic_permissions:type_name -> permission_messages.PermissionsType.TopicPermissions
	0,  // 5: permission_messages.PermissionsType.CachePermissions.role:type_name -> permission_messages.CacheRole
	6,  // 6: permission_messages.PermissionsType.CachePermissions.all_caches:type_name -> permission_messages.PermissionsType.All
	7,  // 7: permission_messages.PermissionsType.CachePermissions.cache_selector:type_name -> permission_messages.PermissionsType.CacheSelector
	6,  // 8: permission_messages.PermissionsType.CachePermissions.all_items:type_name -> permission_messages.PermissionsType.All
	8,  // 9: permission_messages.PermissionsType.CachePermissions.item_selector:type_name -> permission_messages.PermissionsType.CacheItemSelector
	1,  // 10: permission_messages.PermissionsType.TopicPermissions.role:type_name -> permission_messages.TopicRole
	6,  // 11: permission_messages.PermissionsType.TopicPermissions.all_caches:type_name -> permission_messages.PermissionsType.All
	7,  // 12: permission_messages.PermissionsType.TopicPermissions.cache_selector:type_name -> permission_messages.PermissionsType.CacheSelector
	6,  // 13: permission_messages.PermissionsType.TopicPermissions.all_topics:type_name -> permission_messages.PermissionsType.All
	10, // 14: permission_messages.PermissionsType.TopicPermissions.topic_selector:type_name -> permission_messages.PermissionsType.TopicSelector
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_permissionmessages_proto_init() }
func file_permissionmessages_proto_init() {
	if File_permissionmessages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_permissionmessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_permissionmessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplicitPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_permissionmessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_permissionmessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsType_All); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_permissionmessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsType_CacheSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_permissionmessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsType_CacheItemSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_permissionmessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsType_CachePermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_permissionmessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsType_TopicSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_permissionmessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsType_TopicPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_permissionmessages_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Permissions_SuperUser)(nil),
		(*Permissions_Explicit)(nil),
	}
	file_permissionmessages_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*PermissionsType_CachePermissions_)(nil),
		(*PermissionsType_TopicPermissions_)(nil),
	}
	file_permissionmessages_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*PermissionsType_CacheSelector_CacheName)(nil),
	}
	file_permissionmessages_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*PermissionsType_CacheItemSelector_Key)(nil),
		(*PermissionsType_CacheItemSelector_KeyPrefix)(nil),
	}
	file_permissionmessages_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*PermissionsType_CachePermissions_AllCaches)(nil),
		(*PermissionsType_CachePermissions_CacheSelector)(nil),
		(*PermissionsType_CachePermissions_AllItems)(nil),
		(*PermissionsType_CachePermissions_ItemSelector)(nil),
	}
	file_permissionmessages_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*PermissionsType_TopicSelector_TopicName)(nil),
		(*PermissionsType_TopicSelector_TopicNamePrefix)(nil),
	}
	file_permissionmessages_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*PermissionsType_TopicPermissions_AllCaches)(nil),
		(*PermissionsType_TopicPermissions_CacheSelector)(nil),
		(*PermissionsType_TopicPermissions_AllTopics)(nil),
		(*PermissionsType_TopicPermissions_TopicSelector)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_permissionmessages_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_permissionmessages_proto_goTypes,
		DependencyIndexes: file_permissionmessages_proto_depIdxs,
		EnumInfos:         file_permissionmessages_proto_enumTypes,
		MessageInfos:      file_permissionmessages_proto_msgTypes,
	}.Build()
	File_permissionmessages_proto = out.File
	file_permissionmessages_proto_rawDesc = nil
	file_permissionmessages_proto_goTypes = nil
	file_permissionmessages_proto_depIdxs = nil
}
